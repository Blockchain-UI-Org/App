{"ast":null,"code":"import numbro from 'numbro';\n\n// Check whether value can be converted to a usable number\nexport const isNumeric = obj => {\n  return !Number.isNaN(parseFloat(obj)) && Number.isFinite(Number(obj));\n};\nexport const formatNumber = function (number) {\n  let decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  let average = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let threshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let dropTailingNumber = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  const value = number && isNumeric(number) ? number : 0;\n  if (value > 0 && value < threshold) {\n    return `<${threshold}`;\n  }\n  const basicFormat = {\n    thousandSeparated: true,\n    mantissa: decimal,\n    optionalMantissa: true,\n    roundingFunction: dropTailingNumber ? Math.floor : Math.round\n  };\n  const format = Math.floor(value).toString().length > 6 ? {\n    ...basicFormat,\n    average\n  } : basicFormat;\n  return numbro(value).format(format).toUpperCase();\n};","map":{"version":3,"names":["numbro","isNumeric","obj","Number","isNaN","parseFloat","isFinite","formatNumber","number","decimal","average","threshold","dropTailingNumber","value","basicFormat","thousandSeparated","mantissa","optionalMantissa","roundingFunction","Math","floor","round","format","toString","length","toUpperCase"],"sources":["/Users/christopherigbojekwe/Documents/work/web3ui/src/utils/format.ts"],"sourcesContent":["import numbro from 'numbro';\n\n// Check whether value can be converted to a usable number\nexport const isNumeric = (obj: any) => {\n  return !Number.isNaN(parseFloat(obj)) && Number.isFinite(Number(obj));\n};\n\nexport const formatNumber = (\n  number: number | null,\n  decimal = 2,\n  average = true,\n  threshold = 0,\n  dropTailingNumber = false\n) => {\n  const value = number && isNumeric(number) ? number : 0;\n  if (value > 0 && value < threshold) {\n    return `<${threshold}`;\n  }\n  const basicFormat = {\n    thousandSeparated: true,\n    mantissa: decimal,\n    optionalMantissa: true,\n    roundingFunction: dropTailingNumber ? Math.floor : Math.round,\n  };\n  const format =\n    Math.floor(value).toString().length > 6 ? { ...basicFormat, average } : basicFormat;\n  return numbro(value).format(format).toUpperCase();\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;;AAE3B;AACA,OAAO,MAAMC,SAAS,GAAIC,GAAQ,IAAK;EACrC,OAAO,CAACC,MAAM,CAACC,KAAK,CAACC,UAAU,CAACH,GAAG,CAAC,CAAC,IAAIC,MAAM,CAACG,QAAQ,CAACH,MAAM,CAACD,GAAG,CAAC,CAAC;AACvE,CAAC;AAED,OAAO,MAAMK,YAAY,GAAG,UAC1BC,MAAqB,EAKlB;EAAA,IAJHC,OAAO,uEAAG,CAAC;EAAA,IACXC,OAAO,uEAAG,IAAI;EAAA,IACdC,SAAS,uEAAG,CAAC;EAAA,IACbC,iBAAiB,uEAAG,KAAK;EAEzB,MAAMC,KAAK,GAAGL,MAAM,IAAIP,SAAS,CAACO,MAAM,CAAC,GAAGA,MAAM,GAAG,CAAC;EACtD,IAAIK,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGF,SAAS,EAAE;IAClC,OAAQ,IAAGA,SAAU,EAAC;EACxB;EACA,MAAMG,WAAW,GAAG;IAClBC,iBAAiB,EAAE,IAAI;IACvBC,QAAQ,EAAEP,OAAO;IACjBQ,gBAAgB,EAAE,IAAI;IACtBC,gBAAgB,EAAEN,iBAAiB,GAAGO,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE;EAC1D,CAAC;EACD,MAAMC,MAAM,GACVH,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC,CAACU,QAAQ,EAAE,CAACC,MAAM,GAAG,CAAC,GAAG;IAAE,GAAGV,WAAW;IAAEJ;EAAQ,CAAC,GAAGI,WAAW;EACrF,OAAOd,MAAM,CAACa,KAAK,CAAC,CAACS,MAAM,CAACA,MAAM,CAAC,CAACG,WAAW,EAAE;AACnD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}