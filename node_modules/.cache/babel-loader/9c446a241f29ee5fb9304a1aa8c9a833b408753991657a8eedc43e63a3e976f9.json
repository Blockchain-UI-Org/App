{"ast":null,"code":"import _mock from './_mock';\nimport { randomNumberRange, randomInArray } from './funcs';\n\n// ----------------------------------------------------------------------\n\nexport const _userAbout = {\n  id: _mock.id(1),\n  cover: _mock.image.cover(1),\n  position: 'UI Designer',\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  quote: 'Tart I love sugar plum I love oat cake. Sweet roll caramels I love jujubes. Topping cake wafer..',\n  country: _mock.address.country(1),\n  email: _mock.email(1),\n  company: _mock.company(1),\n  school: _mock.company(2),\n  role: 'Manager',\n  facebookLink: `https://www.facebook.com/caitlyn.kerluke`,\n  instagramLink: `https://www.instagram.com/caitlyn.kerluke`,\n  linkedinLink: `https://www.linkedin.com/in/caitlyn.kerluke`,\n  twitterLink: `https://www.twitter.com/caitlyn.kerluke`\n};\nexport const _userFollowers = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  country: _mock.address.country(index),\n  isFollowed: _mock.boolean(index)\n}));\nexport const _userFriends = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  role: _mock.role(index)\n}));\nexport const _userGallery = [...Array(12)].map((_, index) => ({\n  id: _mock.id(index),\n  title: _mock.text.title(index),\n  postAt: _mock.time(index),\n  imageUrl: _mock.image.cover(index)\n}));\nexport const _userFeeds = [...Array(3)].map((_, index) => ({\n  id: _mock.id(index),\n  author: {\n    id: _mock.id(8),\n    avatarUrl: _mock.image.avatar(1),\n    name: 'Caitlyn Kerluke'\n  },\n  isLiked: true,\n  createdAt: _mock.time(index),\n  media: _mock.image.feed(index),\n  message: _mock.text.sentence(index),\n  personLikes: [...Array(36)].map((_, index) => ({\n    name: _mock.name.fullName(index),\n    avatarUrl: _mock.image.avatar(index + 2)\n  })),\n  comments: index === 2 && [] || [{\n    id: _mock.id(7),\n    author: {\n      id: _mock.id(8),\n      avatarUrl: _mock.image.avatar(randomInArray([2, 3, 4, 5, 6]) || 2),\n      name: _mock.name.fullName(index + 5)\n    },\n    createdAt: _mock.time(2),\n    message: 'Praesent venenatis metus at'\n  }, {\n    id: _mock.id(9),\n    author: {\n      id: _mock.id(10),\n      avatarUrl: _mock.image.avatar(randomInArray([7, 8, 9, 10, 11]) || 7),\n      name: _mock.name.fullName(index + 6)\n    },\n    createdAt: _mock.time(3),\n    message: 'Etiam rhoncus. Nullam vel sem. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Sed lectus.'\n  }]\n}));\nexport const _userCards = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  cover: _mock.image.cover(index),\n  name: _mock.name.fullName(index),\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  totalPost: randomNumberRange(999, 99999),\n  position: _mock.role(index)\n}));\nexport const _userPayment = [...Array(2)].map((_, index) => ({\n  id: _mock.id(index),\n  cardNumber: ['**** **** **** 1234', '**** **** **** 5678', '**** **** **** 7878'][index],\n  cardType: ['master_card', 'visa', 'master_card'][index]\n}));\nexport const _userAddressBook = [...Array(4)].map((_, index) => ({\n  id: _mock.id(index),\n  name: _mock.name.fullName(index),\n  phone: _mock.phoneNumber(index),\n  country: _mock.address.country(index),\n  state: 'New Hampshire',\n  city: 'East Sambury',\n  street: '41256 Kamille Turnpike',\n  zipCode: '85807'\n}));\nexport const _userInvoices = [...Array(10)].map((_, index) => ({\n  id: _mock.id(index),\n  createdAt: _mock.time(index),\n  price: _mock.number.price(index)\n}));\nexport const _userList = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  email: _mock.email(index),\n  phoneNumber: _mock.phoneNumber(index),\n  address: '908 Jack Locks',\n  country: _mock.address.country(index),\n  state: 'Virginia',\n  city: 'Rancho Cordova',\n  zipCode: '85807',\n  company: _mock.company(index),\n  isVerified: _mock.boolean(index),\n  status: randomInArray(['active', 'banned']),\n  role: _mock.role(index)\n}));","map":{"version":3,"names":["_mock","randomNumberRange","randomInArray","_userAbout","id","cover","image","position","follower","following","quote","country","address","email","company","school","role","facebookLink","instagramLink","linkedinLink","twitterLink","_userFollowers","Array","map","_","index","avatarUrl","avatar","name","fullName","isFollowed","boolean","_userFriends","_userGallery","title","text","postAt","time","imageUrl","_userFeeds","author","isLiked","createdAt","media","feed","message","sentence","personLikes","comments","_userCards","totalPost","_userPayment","cardNumber","cardType","_userAddressBook","phone","phoneNumber","state","city","street","zipCode","_userInvoices","price","number","_userList","isVerified","status"],"sources":["/Users/christopherigbojekwe/Documents/work/web3ui/src/component/_mock/_user.ts"],"sourcesContent":["import _mock from './_mock';\nimport { randomNumberRange, randomInArray } from './funcs';\n\n// ----------------------------------------------------------------------\n\nexport const _userAbout = {\n  id: _mock.id(1),\n  cover: _mock.image.cover(1),\n  position: 'UI Designer',\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  quote:\n    'Tart I love sugar plum I love oat cake. Sweet roll caramels I love jujubes. Topping cake wafer..',\n  country: _mock.address.country(1),\n  email: _mock.email(1),\n  company: _mock.company(1),\n  school: _mock.company(2),\n  role: 'Manager',\n  facebookLink: `https://www.facebook.com/caitlyn.kerluke`,\n  instagramLink: `https://www.instagram.com/caitlyn.kerluke`,\n  linkedinLink: `https://www.linkedin.com/in/caitlyn.kerluke`,\n  twitterLink: `https://www.twitter.com/caitlyn.kerluke`,\n};\n\nexport const _userFollowers = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  country: _mock.address.country(index),\n  isFollowed: _mock.boolean(index),\n}));\n\nexport const _userFriends = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  role: _mock.role(index),\n}));\n\nexport const _userGallery = [...Array(12)].map((_, index) => ({\n  id: _mock.id(index),\n  title: _mock.text.title(index),\n  postAt: _mock.time(index),\n  imageUrl: _mock.image.cover(index),\n}));\n\nexport const _userFeeds = [...Array(3)].map((_, index) => ({\n  id: _mock.id(index),\n  author: {\n    id: _mock.id(8),\n    avatarUrl: _mock.image.avatar(1),\n    name: 'Caitlyn Kerluke',\n  },\n  isLiked: true,\n  createdAt: _mock.time(index),\n  media: _mock.image.feed(index),\n  message: _mock.text.sentence(index),\n  personLikes: [...Array(36)].map((_, index) => ({\n    name: _mock.name.fullName(index),\n    avatarUrl: _mock.image.avatar(index + 2),\n  })),\n  comments: (index === 2 && []) || [\n    {\n      id: _mock.id(7),\n      author: {\n        id: _mock.id(8),\n        avatarUrl: _mock.image.avatar(randomInArray([2, 3, 4, 5, 6]) || 2),\n        name: _mock.name.fullName(index + 5),\n      },\n      createdAt: _mock.time(2),\n      message: 'Praesent venenatis metus at',\n    },\n    {\n      id: _mock.id(9),\n      author: {\n        id: _mock.id(10),\n        avatarUrl: _mock.image.avatar(randomInArray([7, 8, 9, 10, 11]) || 7),\n        name: _mock.name.fullName(index + 6),\n      },\n      createdAt: _mock.time(3),\n      message:\n        'Etiam rhoncus. Nullam vel sem. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Sed lectus.',\n    },\n  ],\n}));\n\nexport const _userCards = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  cover: _mock.image.cover(index),\n  name: _mock.name.fullName(index),\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  totalPost: randomNumberRange(999, 99999),\n  position: _mock.role(index),\n}));\n\nexport const _userPayment = [...Array(2)].map((_, index) => ({\n  id: _mock.id(index),\n  cardNumber: ['**** **** **** 1234', '**** **** **** 5678', '**** **** **** 7878'][index],\n  cardType: ['master_card', 'visa', 'master_card'][index],\n}));\n\nexport const _userAddressBook = [...Array(4)].map((_, index) => ({\n  id: _mock.id(index),\n  name: _mock.name.fullName(index),\n  phone: _mock.phoneNumber(index),\n  country: _mock.address.country(index),\n  state: 'New Hampshire',\n  city: 'East Sambury',\n  street: '41256 Kamille Turnpike',\n  zipCode: '85807',\n}));\n\nexport const _userInvoices = [...Array(10)].map((_, index) => ({\n  id: _mock.id(index),\n  createdAt: _mock.time(index),\n  price: _mock.number.price(index),\n}));\n\nexport const _userList = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  email: _mock.email(index),\n  phoneNumber: _mock.phoneNumber(index),\n  address: '908 Jack Locks',\n  country: _mock.address.country(index),\n  state: 'Virginia',\n  city: 'Rancho Cordova',\n  zipCode: '85807',\n  company: _mock.company(index),\n  isVerified: _mock.boolean(index),\n  status: randomInArray(['active', 'banned']),\n  role: _mock.role(index),\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}