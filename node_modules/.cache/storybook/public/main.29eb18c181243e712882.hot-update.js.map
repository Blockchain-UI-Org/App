{"version":3,"file":"main.29eb18c181243e712882.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AAAA;AAUA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAHA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA","sources":["webpack://app/./src/Components/baseWeb/overrides/button.tsx"],"sourcesContent":["import React from \"react\";\nimport { ButtonOverrides, SIZE } from \"baseui/button\";\nimport { StyleObject } from \"styletron-react\";\nimport { Theme } from \"../\";\nimport { StyledLoader } from \"./buttonLoader\";\n\ntype ButtonVariants =\n  | \"brand\"\n  | \"positive\"\n  | \"negative\"\n  | \"neutral\"\n  | \"warning\"\n  | \"decorative\";\n\nconst KIND = {\n  contained: \"contained\",\n  outlined: \"outlined\",\n  text: \"text\",\n};\n\ninterface StyleProps {\n  $disabled: boolean;\n  //@ts-ignore\n  $size: SIZE[keyof SIZE];\n  variant: ButtonVariants;\n}\n\nconst buttonVariants = {\n  brand: \"brand\",\n  positive: \"positive\",\n  negative: \"negative\",\n  neutral: \"neutral\",\n  warning: \"warning\",\n  decorative: \"decorative\",\n};\n\nconst buttonSizes = ($theme: Theme) => {\n  const {\n    scale300,\n    scale500,\n    scale550,\n    scale600,\n    scale650,\n    scale800,\n    scale900,\n    scale1000,\n    scale1200,\n    scale1400,\n  } = $theme.sizing;\n  return {\n    mini: {\n      fontSize: scale500,\n      height: scale900,\n      padding: `0 ${scale300}`,\n    },\n    compact: {\n      fontSize: scale550,\n      height: scale1000,\n      padding: `0 ${scale600}`,\n    },\n    default: {\n      fontSize: scale600,\n      height: scale1200,\n      padding: `0 ${scale800}`,\n    },\n    large: {\n      fontSize: scale650,\n      height: scale1400,\n      padding: `0 ${scale900}`,\n    },\n  };\n};\n\nconst buttonOverrides = (\n  $theme: Theme,\n  block = false,\n  kind = KIND.contained,\n  variant = buttonVariants.brand\n): ButtonOverrides => {\n  const isContained = kind === KIND.contained;\n  const { colors, animation, sizing } = $theme;\n  const {\n    disabledBackground,\n    disabledBackgroundContained,\n    disabledBorder,\n    disabledTextContained,\n    disabledText,\n    ...rest\n  } = colors.button;\n  const { scale100, scale300 } = sizing;\n\n  const {\n    activeBackground,\n    background,\n    focus,\n    hoverBackground,\n    hoverText,\n    loadingLeft,\n    loadingMiddle,\n    loadingRight,\n    ...buttonVariant\n  } = rest[variant || buttonVariants.brand];\n\n  const { border, text } = buttonVariant[kind || KIND.contained];\n\n  return {\n    BaseButton: {\n      style: ({ $disabled, $size }: StyleProps): StyleObject => ({\n        ...$theme.borders.borderWidth100,\n        color: text,\n        backgroundColor: isContained ? background : \"transparent\",\n        borderColor: kind === KIND.text ? \"transparent\" : border,\n        fontFamily: \"Public Sans\",\n        fontWeight: 600,\n        transitionDuration: `${animation.timing200}`,\n        transitionTimingFunction: \"ease, ease\",\n        width: block ? \"100%\" : \"auto\",\n        ...buttonSizes($theme)?.[$size],\n        \":active\": {\n          ...($disabled\n            ? {}\n            : {\n                backgroundColor: activeBackground,\n                color: hoverText,\n              }),\n        },\n        ...($disabled\n          ? {}\n          : {\n              \":hover\": {\n                backgroundColor: hoverBackground,\n                borderColor: hoverBackground,\n                color: hoverText,\n              },\n              \":focus\": {\n                boxShadow: \"none\",\n                outline: \"solid\",\n                borderColor: focus,\n                outlineColor: focus,\n                outlineWidth: scale100,\n              },\n            }),\n        \":disabled\": {\n          backgroundColor: isContained\n            ? disabledBackgroundContained\n            : disabledBackground,\n          borderColor: disabledBorder[kind],\n          color: isContained ? disabledTextContained : disabledText,\n        },\n      }),\n    },\n    StartEnhancer: {\n      style: ({ $size }: StyleProps): StyleObject => ({\n        marginRight:\n          $size === \"compact\" || $size === \"mini\" ? scale100 : scale300,\n      }),\n    },\n    EndEnhancer: {\n      style: ({ $size }: StyleProps): StyleObject => ({\n        marginLeft:\n          $size === \"compact\" || $size === \"mini\" ? scale100 : scale300,\n      }),\n    },\n    LoadingSpinner: {\n      component: () => (\n        <StyledLoader\n          leftColor={loadingLeft}\n          middleColor={loadingMiddle}\n          rightColor={loadingRight}\n        />\n      ),\n    },\n  };\n};\n\nexport { ButtonVariants, buttonOverrides };\n"],"names":[],"sourceRoot":""}