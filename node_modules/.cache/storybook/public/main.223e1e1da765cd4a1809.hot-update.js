"use strict";
globalThis["webpackHotUpdateapp"]("main",{

/***/ "./src/Components/baseWeb/theme/index.ts":
/*!***********************************************!*\
  !*** ./src/Components/baseWeb/theme/index.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "availableThemes": () => (/* binding */ availableThemes),
/* harmony export */   "lightTheme": () => (/* binding */ lightTheme),
/* harmony export */   "useStyletron": () => (/* binding */ useStyletron)
/* harmony export */ });
/* harmony import */ var baseui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! baseui */ "./node_modules/baseui/esm/themes/light-theme/light-theme.js");
/* harmony import */ var baseui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! baseui */ "./node_modules/baseui/esm/themes/light-theme/create-light-theme.js");
/* harmony import */ var baseui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! baseui */ "./node_modules/baseui/esm/styles/styled.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");


// Using only radius properties from BaseLightTheme to avoid defining twice
// These values can also be safely used on darkTheme as they are, inside baseui, using a shared config object
const {
  radius200,
  radius300
} = baseui__WEBPACK_IMPORTED_MODULE_0__.LightTheme.borders;
const availableThemes = {
  light: "blockfi-light-theme"
};
const lightTheme = (0,baseui__WEBPACK_IMPORTED_MODULE_1__["default"])({}, {
  name: availableThemes.light,
  breakpoints: {
    xsmall: 0,
    small: 577,
    medium: 768,
    large: 1024,
    xlarge: 1360
  },
  mediaQuery: {
    xsmall: "@media screen and (min-width: 0)",
    small: "@media screen and (min-width: 577px)",
    medium: "@media screen and (min-width: 768px)",
    large: "@media screen and (min-width: 1024px)",
    xlarge: "@media screen and (min-width: 1360px)"
  },
  colors: {
    // Accordion

    accordionBackgroundNegative: "#FEF6F4",
    accordionBorderAccentActive: "#8099F5",
    accordionBorderDefaultActive: "#8099F5",
    accordionBorderNegative: "#F7A0A0",
    accordionContentBorderAccent: "#8099F5",
    accordionContentBorderDefault: "#8099F5",
    accordionContentBorderNegative: "#F7A0A0",
    // CryptoIconList
    cryptoIconListText: "#E2E2E2",
    // Link
    linkText: "#0032EB",
    linkVisited: "#4d63f7",
    linkHover: "#8099F5",
    linkActive: "#8099F5",
    // FileUploader
    fileUploaderBorder: "#AFAFAF",
    fileUploaderError: "#D44333",
    fileUploaderItemBorder: "#F2F2F2",
    fileUploaderText: "#545454",
    // Inputs
    borderSelected: "#8099F5",
    borderStateDisabled: "#E5E5E5",
    inputBorder: "#B2B2B2",
    inputBorderError: "#F7A0A0",
    inputBorderPositive: "#80F9C7",
    inputFill: "#FFF",
    inputFillActive: "#FFF",
    inputFillDisabled: "#FFF",
    inputFillError: "#FEF5F5",
    inputFillPositive: "#F2FEF9",
    inputPlaceholder: "#808080",
    inputPlaceholderDisabled: "#E5E5E5",
    menuFillHover: "#F2F5FE",
    menuFontHighlighted: "#333",
    menuFontSelected: "#333",
    // Navbar
    navbarBackgroundOnboarding: "#E9EDF2",
    navbarDropdownText: "#1A1A1A",
    navbarMenuButton: "#1A1A1A",
    // Notification
    notificationBackgroundInfo: "#F2F5FE",
    notificationBackgroundNeutral: vegaColors.neutral100,
    notificationBorderInfo: "#B2C1F9",
    notificationBorderNeutral: vegaColors.neutral300,
    notificationColorInfo: vegaColors.brandBlue,
    notificationColorNeutral: vegaColors.neutral900,
    notificationIconInfo: "#617EE8",
    notificationIconNeutral: vegaColors.neutral900,
    // Banner
    bannerNeutralText: vegaColors.brandBlack,
    bannerNeutralBackground: vegaColors.neutral100,
    bannerNeutralBorder: vegaColors.neutral300,
    bannerPositiveText: vegaColors.alertGreen700,
    bannerPositiveBackground: vegaColors.alertGreen100,
    bannerPositiveBorder: vegaColors.alertGreen300,
    bannerWarningText: vegaColors.alertYellow800,
    bannerWarningBackground: vegaColors.alertYellow100,
    bannerWarningBorder: vegaColors.alertYellow,
    bannerNegativeText: vegaColors.alertRed700,
    bannerNegativeBackground: vegaColors.alertRed100,
    bannerNegativeBorder: vegaColors.alertRed300,
    // PopoverButton
    popoverButtonBackground: vegaColors.brandWhite,
    popoverButtonBorder: vegaColors.neutral300,
    popoverButtonCheckBorder: "#E6E6E6",
    popoverButtonIcon: vegaColors.neutral600,
    popoverButtonText: vegaColors.brandBlack,
    // ProgressBar
    progressBarBackground: "#EEE",
    progressBarLabel: vegaColors.brandBlack,
    progressBarPrimary: vegaColors.brandBlue,
    progressBarPositive: "#3AA76D",
    progressBarNegative: "#D44333",
    // ProgressIndicator
    progressIndicatorBackground: vegaColors.brandBlue,
    progressIndicatorBackgroundDisabled: vegaColors.neutral500,
    progressIndicatorIcon: vegaColors.brandWhite,
    // ProgressSteps
    progressStepIconBorderDisabled: vegaColors.neutral1000,
    progressStepIconTextDisabled: "#171717",
    progressStepIconBackgroundDisabled: vegaColors.neutral800,
    progressStepIconBackgroundDark: vegaColors.brandWhite,
    progressStepIconBorderDark: vegaColors.neutral700,
    progressStepIconTextDark: vegaColors.brandBlue,
    progressStepIconBackgroundDefault: vegaColors.neutral800,
    progressStepIconBorderDefault: vegaColors.neutral1000,
    progressStepIconTextDefault: "#171717",
    progressStepIconBackgroundPrimary: "#8099F5",
    progressStepIconBorderPrimary: "#1A47ED",
    progressStepIconTextPrimary: vegaColors.brandBlue,
    progressStepIconBackgroundPositive: "#80F9C6",
    progressStepIconBorderPositive: "#007A48",
    progressStepIconTextPositive: vegaColors.brandBlack,
    progressStepText: vegaColors.brandBlack,
    progressStepTextDisabled: "#AFAFAF",
    progressStepTextDark: vegaColors.brandWhite,
    progressStepTextDarkDisabled: vegaColors.neutral800,
    // Snackbar
    snackbarBackground: vegaColors.neutral100,
    snackbarText: vegaColors.brandBlack,
    snackbarBorder: vegaColors.neutral300,
    // Side Navigation
    sideNavigationText: "#545454",
    sideNavigationTextActive: "#276EF1",
    sideNavigationTextFocus: "#001976",
    sideNavigationTextHover: "#335BEF",
    sideNavigationTextHoverActive: "#276EF1",
    // Table
    tableBorder: vegaColors.neutral300,
    tableBorderHeader: vegaColors.neutral900,
    tableFill: vegaColors.brandWhite,
    tableFillHover: vegaColors.brandWhite,
    tableFillFocus: "#F6F6F6",
    tableFooterFill: vegaColors.neutral200,
    // Tooltip
    tooltipBackground: "#333333",
    tooltipText: "#FFF",
    // Tag
    tagNeutralOutlinedFont: "#4C4C4C",
    tagWarningOutlinedFont: "#684D1C",
    tagWarningSolidFont: "#684D1C",
    tagNeutralBackground: "#808080",
    tagWarningBackground: "#FFCF70",
    tagPrimaryBackground: "#0032EB",
    tagNegativeBackground: "#D83A3A",
    tagPositiveBackground: "#007A48",
    // datepicker
    calendarChevronIconColor: vegaColors.brandBlack,
    calendarBackground: vegaColors.brandWhite,
    calendarBorder: vegaColors.neutral300,
    calendarDayActiveBackground: vegaColors.brandBlue500,
    calendarDayActiveBorder: vegaColors.brandBlue700,
    calendarDayPseudoRangeBackground: vegaColors.brandBlue100,
    calendarDayHoverBackground: vegaColors.brandWhite,
    calendarDayHoverBorder: vegaColors.brandBlue700,
    calendarDaySelectedText: vegaColors.brandWhite,
    calendarDayDisabledText: vegaColors.neutral400,
    calendarText: vegaColors.brandBlack,
    calendarIcon: vegaColors.brandBlack,
    calendarInputClearIcon: vegaColors.neutral700,
    calendarDropdownBackground: vegaColors.backgroundWhite100,
    calendarDropdownHighlightedBackground: vegaColors.backgroundWhite300,
    calendarControlBackgroundColor: vegaColors.backgroundWhite100,
    calendarControlBorderColor: vegaColors.backgroundWhite300,
    // checkbox
    tickBorder: "#808080",
    tickBorderDisabled: "#E5E5E5",
    tickBorderError: "#F04141",
    tickBorderSelected: "#0032EB",
    tickFill: "#FFF",
    tickFillDisabled: "#FFF",
    tickFillError: "#F7A0A0",
    tickFillErrorHover: "#FED7D2",
    tickFillErrorHoverActive: "#F1998E",
    tickFillErrorSelected: "#F7A0A0",
    tickFillErrorSelectedHover: "#FED7D2",
    tickFillErrorSelectedHoverActive: "#F1998E",
    tickFillSelected: "#335BEF",
    tickFillSelectedHover: "#0032EB",
    tickFillSelectedHoverActive: "#0032EB",
    tickMarkFillDisabled: "#E5E5E5",
    tickMarkFillError: "#F04141",
    // TreeView
    treeViewItemBackground: vegaColors.brandWhite,
    treeViewItemText: vegaColors.brandBlack,
    treeViewNestedItemBackground: vegaColors.neutral200,
    treeViewNestedItemText: vegaColors.neutral900,
    treeViewNestedItemExpandedText: vegaColors.brandBlue
  },
  lighting: {
    cryptoListLighting: "0px 0px 4px rgba(0, 0, 0, 0.1)",
    datePickerLighting: "0 10px 10px rgba(0, 0, 0, 0.05)",
    drawerLighting: "rgb(0 0 0 / 10%) 0px 1px 1px inset",
    modalLighting: "0 8px 36px rgba(0, 0, 0, 0.17)",
    popoverLighting: "0 10px 10px rgba(0, 0, 0, 0.05)",
    navbarLighting: "0px 1px 1px rgba(0, 0, 0, 0.1)",
    navbarDropdownLighting: "0px 9px 28px 8px rgba(0, 0, 0, 0.1), 0px 6px 16px rgba(0, 0, 0, 0.1)",
    tooltipLighting: "0px 5px 5px rgba(0, 0, 0, 0.05)",
    buttonLighting: "0 0 0 2px",
    snackbarLighting: "0px 4px 16px rgba(0, 0, 0, 0.15)"
  }
});
const useStyletron = (0,baseui__WEBPACK_IMPORTED_MODULE_2__.createThemedUseStyletron)();


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=main.223e1e1da765cd4a1809.hot-update.js.map