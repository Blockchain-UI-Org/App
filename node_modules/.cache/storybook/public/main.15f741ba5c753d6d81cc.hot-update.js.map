{"version":3,"file":"main.15f741ba5c753d6d81cc.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAfA;AAiBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA","sources":["webpack://app/./src/Components/image/image.tsx"],"sourcesContent":["import { FC, ImgHTMLAttributes, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport * as availableImages from '../static/images';\nimport { defaultColors, colorsWithDarkMode } from '../theme/colors';\n\nexport interface ImageProps extends ImgHTMLAttributes<HTMLImageElement> {\n  name: string;\n  src?: string;\n  width?: string;\n  height?: string;\n  bgColor?: keyof typeof defaultColors | keyof typeof colorsWithDarkMode;\n  iconType?: 'crypto' | 'regular';\n}\n\ninterface StyledImageProps {\n  bgColor?: keyof typeof defaultColors | keyof typeof colorsWithDarkMode;\n}\nconst StyledImage = styled.img<StyledImageProps>`\n  width: ${({ width }) => width || 'auto'};\n  height: ${({ height }) => height || 'auto'};\n  background-color: ${({ bgColor }) => bgColor};\n`;\n\nconst Image: FC<ImageProps> = ({ name, src, iconType = 'regular', ...props }) => {\n  const [imageSrc, setImageSrc] = useState<string>();\n\n  useEffect(() => {\n    if (src) {\n      setImageSrc(src);\n    } else {\n      const imageName = name in availableImages.default ? name : 'fallback';\n      setImageSrc(availableImages.default[imageName]);\n    }\n  }, [iconType, name, src]);\n\n  return (\n    <StyledImage src={imageSrc} data-testid={`${name}-image`} alt={`${name}-image`} {...props} />\n  );\n};\n\nexport const RoundImage = styled(Image)`\n  border-radius: 50%;\n`;\n\nexport default Image;\n"],"names":[],"sourceRoot":""}