{"version":3,"file":"main.3c38bc60b123d42475d3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAOA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://app/./src/Components/theme/typography/typography.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Story } from '@storybook/react';\\nimport { ReactElement } from 'react';\\nimport styled from 'styled-components';\\nimport {\\n  FONT_HEADER_STYLES,\\n  FONT_DISPLAY_STYLES,\\n  FONT_BODY_STYLES,\\n  FontWeightTypes,\\n  FONT_WEIGHTS,\\n  FONT_FAMILY,\\n} from './typography';\\n\\ninterface FontProps {\\n  variant?: Record<string, Record<string, string>>;\\n  'font-weight': FontWeightTypes;\\n  'font-family'?: string;\\n  'font-size'?: string;\\n  'line-height'?: string;\\n}\\nconst StyledFont = styled.p<FontProps>`\\n  font-weight: ${props => (props['font-weight'] ? FONT_WEIGHTS[props['font-weight']] : '')};\\n  font-family: ${FONT_FAMILY};\\n  font-size: ${props => props['font-size']};\\n  line-height: ${props => props['line-height']};\\n`;\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n`;\\n\\nexport default {\\n  component: Text,\\n  title: 'Themes/Typography',\\n};\\n\\nconst generateDisplay = args => {\\n  const display: ReactElement[] = [];\\n  for (const [key, value] of Object.entries(\\n    args.variant as Record<string, Record<string, string>>\\n  )) {\\n    display.push(\\n      <StyledFont {...{ ...value, 'font-weight': args['font-weight'] }}>{key}</StyledFont>\\n    );\\n  }\\n  return display;\\n};\\n\\nconst Template: Story<FontProps> = args => <Wrapper>{generateDisplay(args)}</Wrapper>;\\n\\nexport const Header = Template.bind({});\\n\\nHeader.args = {\\n  variant: FONT_HEADER_STYLES,\\n};\\n\\nHeader.argTypes = {\\n  variant: {\\n    control: { type: false },\\n  },\\n  'font-weight': {\\n    options: ['regular', 'medium', 'bold'],\\n    control: { type: 'radio' },\\n  },\\n};\\n\\nexport const Display = Template.bind({});\\n\\nDisplay.args = {\\n  variant: FONT_DISPLAY_STYLES,\\n};\\n\\nDisplay.argTypes = {\\n  variant: {\\n    control: { type: false },\\n  },\\n  'font-weight': {\\n    options: ['regular', 'medium', 'bold'],\\n    control: { type: 'radio' },\\n  },\\n};\\n\\nexport const Body = Template.bind({});\\n\\nBody.args = {\\n  variant: FONT_BODY_STYLES,\\n};\\n\\nBody.argTypes = {\\n  variant: {\\n    control: { type: false },\\n  },\\n  'font-weight': {\\n    options: ['regular', 'medium', 'bold'],\\n    control: { type: 'radio' },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Header\":{\"startLoc\":{\"col\":35,\"line\":48},\"endLoc\":{\"col\":85,\"line\":48},\"startBody\":{\"col\":35,\"line\":48},\"endBody\":{\"col\":85,\"line\":48}},\"Display\":{\"startLoc\":{\"col\":35,\"line\":48},\"endLoc\":{\"col\":85,\"line\":48},\"startBody\":{\"col\":35,\"line\":48},\"endBody\":{\"col\":85,\"line\":48}},\"Body\":{\"startLoc\":{\"col\":35,\"line\":48},\"endLoc\":{\"col\":85,\"line\":48},\"startBody\":{\"col\":35,\"line\":48},\"endBody\":{\"col\":85,\"line\":48}}};\n    \nimport { Story } from '@storybook/react';\nimport { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport {\n  FONT_HEADER_STYLES,\n  FONT_DISPLAY_STYLES,\n  FONT_BODY_STYLES,\n  FontWeightTypes,\n  FONT_WEIGHTS,\n  FONT_FAMILY,\n} from './typography';\n\ninterface FontProps {\n  variant?: Record<string, Record<string, string>>;\n  'font-weight': FontWeightTypes;\n  'font-family'?: string;\n  'font-size'?: string;\n  'line-height'?: string;\n}\nconst StyledFont = styled.p<FontProps>`\n  font-weight: ${props => (props['font-weight'] ? FONT_WEIGHTS[props['font-weight']] : '')};\n  font-family: ${FONT_FAMILY};\n  font-size: ${props => props['font-size']};\n  line-height: ${props => props['line-height']};\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default {\n  component: Text,\n  title: 'Themes/Typography',\n};\n\nconst generateDisplay = args => {\n  const display: ReactElement[] = [];\n  for (const [key, value] of Object.entries(\n    args.variant as Record<string, Record<string, string>>\n  )) {\n    display.push(\n      <StyledFont {...{ ...value, 'font-weight': args['font-weight'] }}>{key}</StyledFont>\n    );\n  }\n  return display;\n};\n\nconst Template: Story<FontProps> = args => <Wrapper>{generateDisplay(args)}</Wrapper>;\n\nexport const Header = Template.bind({});;\n\nHeader.args = {\n  variant: FONT_HEADER_STYLES,\n};\n\nHeader.argTypes = {\n  variant: {\n    control: { type: false },\n  },\n  'font-weight': {\n    options: ['regular', 'medium', 'bold'],\n    control: { type: 'radio' },\n  },\n};\n\nexport const Display = Template.bind({});;\n\nDisplay.args = {\n  variant: FONT_DISPLAY_STYLES,\n};\n\nDisplay.argTypes = {\n  variant: {\n    control: { type: false },\n  },\n  'font-weight': {\n    options: ['regular', 'medium', 'bold'],\n    control: { type: 'radio' },\n  },\n};\n\nexport const Body = Template.bind({});\n\nBody.args = {\n  variant: FONT_BODY_STYLES,\n};\n\nBody.argTypes = {\n  variant: {\n    control: { type: false },\n  },\n  'font-weight': {\n    options: ['regular', 'medium', 'bold'],\n    control: { type: 'radio' },\n  },\n};\n\n\n\nHeader.parameters = { storySource: { source: \"args => <Wrapper>{generateDisplay(args)}</Wrapper>\" }, ...Header.parameters };\nDisplay.parameters = { storySource: { source: \"args => <Wrapper>{generateDisplay(args)}</Wrapper>\" }, ...Display.parameters };\nBody.parameters = { storySource: { source: \"args => <Wrapper>{generateDisplay(args)}</Wrapper>\" }, ...Body.parameters };"],"names":[],"sourceRoot":""}