{"version":3,"file":"main.3422df05b0da64773b44.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://app/./src/Components/icon/cryptoIcon/cryptoIcon.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Story, Meta } from \\\"@storybook/react\\\";\\nimport styled from \\\"styled-components\\\";\\nimport { ReactElement } from \\\"react\\\";\\nimport { CryptoIcon, CryptoIconProps } from \\\"../icon\\\";\\nimport { cryptoIcons } from \\\"../../static/images/icons/crypto\\\";\\nimport { Inline, Stack } from \\\"../../theme/layouts\\\";\\n\\nexport default {\\n  component: CryptoIcon,\\n  title: \\\"Atoms/Crypto Icon\\\",\\n} as Meta;\\n\\nconst Layout = styled(Inline)`\\n  flex-wrap: wrap;\\n`;\\n\\nconst Wrapper = styled(Stack)`\\n  margin: 50px;\\n`;\\n  //@ts-ignore\\nconst imageDisplay = (args) => {\\n  const display: ReactElement[] = [];\\n  for (const [key, value] of Object.entries(cryptoIcons).sort(function (a, b) {\\n    const nameA = a[0].toLowerCase(),\\n      nameB = b[0].toLowerCase();\\n    if (nameA < nameB)\\n      //sort string ascending\\n      return -1;\\n    if (nameA > nameB) return 1;\\n    return 0; //default return value (no sorting)\\n  })) {\\n    display.push(\\n      <Wrapper alignItems=\\\"center\\\" gap=\\\"0.5rem\\\" key={key}>\\n        <span>{key}</span>\\n        <CryptoIcon cryptoSymbol={key} src={value} {...args} />\\n      </Wrapper>\\n    );\\n  }\\n  return display;\\n};\\n\\nconst AllIconsTemplate: Story<CryptoIconProps> = (args) => (\\n  <Layout>{imageDisplay(args)}</Layout>\\n);\\n\\nexport const AvailableIcons = AllIconsTemplate.bind({});\\n\\nAvailableIcons.args = {\\n  size: \\\"medium\\\",\\n};\\n\\nAvailableIcons.argTypes = {\\n  size: {\\n    options: [\\\"xsmall\\\", \\\"small\\\", \\\"medium\\\", \\\"large\\\"],\\n    control: { type: \\\"radio\\\" },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"AvailableIcons\":{\"startLoc\":{\"col\":49,\"line\":42},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":49,\"line\":42},\"endBody\":{\"col\":1,\"line\":44}}};\n    \nimport { Story, Meta } from \"@storybook/react\";\nimport styled from \"styled-components\";\nimport { ReactElement } from \"react\";\nimport { CryptoIcon, CryptoIconProps } from \"../icon\";\nimport { cryptoIcons } from \"../../static/images/icons/crypto\";\nimport { Inline, Stack } from \"../../theme/layouts\";\n\nexport default {\n  component: CryptoIcon,\n  title: \"Atoms/Crypto Icon\",\n} as Meta;\n\nconst Layout = styled(Inline)`\n  flex-wrap: wrap;\n`;\n\nconst Wrapper = styled(Stack)`\n  margin: 50px;\n`;\n  //@ts-ignore\nconst imageDisplay = (args) => {\n  const display: ReactElement[] = [];\n  for (const [key, value] of Object.entries(cryptoIcons).sort(function (a, b) {\n    const nameA = a[0].toLowerCase(),\n      nameB = b[0].toLowerCase();\n    if (nameA < nameB)\n      //sort string ascending\n      return -1;\n    if (nameA > nameB) return 1;\n    return 0; //default return value (no sorting)\n  })) {\n    display.push(\n      <Wrapper alignItems=\"center\" gap=\"0.5rem\" key={key}>\n        <span>{key}</span>\n        <CryptoIcon cryptoSymbol={key} src={value} {...args} />\n      </Wrapper>\n    );\n  }\n  return display;\n};\n\nconst AllIconsTemplate: Story<CryptoIconProps> = (args) => (\n  <Layout>{imageDisplay(args)}</Layout>\n);\n\nexport const AvailableIcons = AllIconsTemplate.bind({});\n\nAvailableIcons.args = {\n  size: \"medium\",\n};\n\nAvailableIcons.argTypes = {\n  size: {\n    options: [\"xsmall\", \"small\", \"medium\", \"large\"],\n    control: { type: \"radio\" },\n  },\n};\n\n\n\nAvailableIcons.parameters = { storySource: { source: \"(args) => (\\n  <Layout>{imageDisplay(args)}</Layout>\\n)\" }, ...AvailableIcons.parameters };"],"names":[],"sourceRoot":""}