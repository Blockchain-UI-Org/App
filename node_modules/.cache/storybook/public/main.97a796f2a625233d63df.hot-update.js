"use strict";
globalThis["webpackHotUpdateapp"]("main",{

/***/ "./src/component/theme/theme.stories.tsx":
/*!***********************************************!*\
  !*** ./src/component/theme/theme.stories.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Breakpoints": () => (/* binding */ Breakpoints),
/* harmony export */   "Colors": () => (/* binding */ Colors),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react_use__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-use */ "./node_modules/react-use/esm/useWindowSize.js");
/* harmony import */ var styled_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! styled-components */ "./node_modules/styled-components/dist/styled-components.browser.esm.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ "./src/component/theme/index.ts");
/* harmony import */ var _media__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./media */ "./src/component/theme/media.ts");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/christopherigbojekwe/Documents/work/web3ui/src/component/theme/theme.stories.tsx",
  _s = __webpack_require__.$Refresh$.signature();
/* eslint-disable */
// @ts-nocheck
// @ts-ignore
var __STORY__ = "import { Story, Meta } from \"@storybook/react\";\nimport { ReactElement } from \"react\";\nimport { useWindowSize } from \"react-use\";\nimport styled from \"styled-components\";\nimport { theme, themeWithDarkMode } from \".\";\nimport { MEDIA_WIDTHS } from \"./media\";\n\ninterface ThemeProps {\n  darkTheme?: boolean;\n  story?: \"colors\" | \"fonts\" | \"breakpoints\";\n}\n\n//@ts-ignore\nconst colorDisplay = (darkTheme) => {\n  const display: ReactElement[] = [];\n  for (const [key, value] of Object.entries(\n    darkTheme ? themeWithDarkMode().colors : theme.colors\n  ).sort(function (a, b) {\n    const nameA = a[0].toLowerCase(),\n      nameB = b[0].toLowerCase();\n    if (nameA < nameB)\n      //sort string ascending\n      return -1;\n    if (nameA > nameB) return 1;\n    return 0; //default return value (no sorting)\n  })) {\n    display.push(\n      <Wrapper>\n        {key}\n        <ColorBlock bColor={value} />\n      </Wrapper>\n    );\n  }\n  return display;\n};\n\n//@ts-ignore\nconst breakPointsDisplay = (width) => {\n  const { small, medium } = MEDIA_WIDTHS;\n  const getDeviceType = () => {\n    if (width < small) {\n      return \"Mobile\";\n    }\n    if (width > small && width < medium) {\n      return \"Tablet\";\n    }\n    if (width > medium) {\n      return \"Laptop\";\n    }\n    return;\n  };\n\n  return (\n    <Wrapper>\n      Resize window to test\n      <BreakPointBox>\n        <div>\n          Current Window Size:<b>{width}px</b>\n        </div>\n        <br />\n        <br />\n        <div>\n          Type of Device:<b>{getDeviceType()}</b>\n        </div>\n      </BreakPointBox>\n    </Wrapper>\n  );\n};\n\nconst Theme: React.FC<ThemeProps> = ({\n  darkTheme = false,\n  story = \"colors\",\n}) => {\n  const { width } = useWindowSize();\n  const handleDisplay = () => {\n    if (story === \"colors\") {\n      return colorDisplay(darkTheme);\n    }\n\n    if (story === \"breakpoints\") {\n      return breakPointsDisplay(width);\n    }\n    return;\n  };\n  return <Layout>{handleDisplay()}</Layout>;\n};\n\nexport default {\n  component: Theme,\n  title: \"Themes\",\n} as Meta;\n\nconst Template: Story = (args) => <Theme {...args} />;\n\nexport const Colors = Template.bind({});\n\nColors.args = {\n  darkTheme: false,\n};\n\nexport const Breakpoints = Template.bind({});\n\nBreakpoints.args = {\n  story: \"breakpoints\",\n};\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  border-radius: 5px;\n  \n`;\ninterface DisplayProps {\n  bColor?: string;\n}\nconst ColorBlock = styled.div<DisplayProps>`\n  width: 150px;\n  height: 40px;\n  background-color: ${({ bColor }) => bColor};\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  color: white;\n`;\n\nconst BreakPointBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  width: 450px;\n  max-width: 550px;\n  height: 200px;\n  font-size: 25px;\n  border: 1px solid black;\n  color: white;\n`;\n";
// @ts-ignore
var __LOCATIONS_MAP__ = {
  "Colors": {
    "startLoc": {
      "col": 24,
      "line": 93
    },
    "endLoc": {
      "col": 53,
      "line": 93
    },
    "startBody": {
      "col": 24,
      "line": 93
    },
    "endBody": {
      "col": 53,
      "line": 93
    }
  },
  "Breakpoints": {
    "startLoc": {
      "col": 24,
      "line": 93
    },
    "endLoc": {
      "col": 53,
      "line": 93
    },
    "startBody": {
      "col": 24,
      "line": 93
    },
    "endBody": {
      "col": 53,
      "line": 93
    }
  }
};





//@ts-ignore
const colorDisplay = darkTheme => {
  const display = [];
  for (const [key, value] of Object.entries(darkTheme ? (0,___WEBPACK_IMPORTED_MODULE_0__.themeWithDarkMode)().colors : ___WEBPACK_IMPORTED_MODULE_0__.theme.colors).sort(function (a, b) {
    const nameA = a[0].toLowerCase(),
      nameB = b[0].toLowerCase();
    if (nameA < nameB)
      //sort string ascending
      return -1;
    if (nameA > nameB) return 1;
    return 0; //default return value (no sorting)
  })) {
    display.push( /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(Wrapper, {
      children: [key, /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(ColorBlock, {
        bColor: value
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 38,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 7
    }, undefined));
  }
  return display;
};

//@ts-ignore
const breakPointsDisplay = width => {
  const {
    small,
    medium
  } = _media__WEBPACK_IMPORTED_MODULE_1__.MEDIA_WIDTHS;
  const getDeviceType = () => {
    if (width < small) {
      return "Mobile";
    }
    if (width > small && width < medium) {
      return "Tablet";
    }
    if (width > medium) {
      return "Laptop";
    }
    return;
  };
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(Wrapper, {
    children: ["Resize window to test", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(BreakPointBox, {
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        children: ["Current Window Size:", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("b", {
          children: [width, "px"]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 66,
          columnNumber: 31
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 65,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("br", {}, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 68,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("br", {}, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 69,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
        children: ["Type of Device:", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("b", {
          children: getDeviceType()
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 71,
          columnNumber: 26
        }, undefined)]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 70,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 64,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 62,
    columnNumber: 5
  }, undefined);
};
const Theme = _ref => {
  _s();
  let {
    darkTheme = false,
    story = "colors"
  } = _ref;
  const {
    width
  } = (0,react_use__WEBPACK_IMPORTED_MODULE_3__["default"])();
  const handleDisplay = () => {
    if (story === "colors") {
      return colorDisplay(darkTheme);
    }
    if (story === "breakpoints") {
      return breakPointsDisplay(width);
    }
    return;
  };
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(Layout, {
    children: handleDisplay()
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 93,
    columnNumber: 10
  }, undefined);
};
_s(Theme, "7ylMWtgt/PZegaW+VXObWeRbjaQ=", false, function () {
  return [react_use__WEBPACK_IMPORTED_MODULE_3__["default"]];
});
_c = Theme;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  component: Theme,
  title: "Themes"
});
const Template = args => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(Theme, {
  ...args
}, void 0, false, {
  fileName: _jsxFileName,
  lineNumber: 101,
  columnNumber: 35
}, undefined);
_c2 = Template;
const Colors = Template.bind({});
;
Colors.args = {
  darkTheme: false
};
const Breakpoints = Template.bind({});
Breakpoints.args = {
  story: "breakpoints"
};
const Layout = styled_components__WEBPACK_IMPORTED_MODULE_4__["default"].div`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  border-radius: 5px;
  
`;
_c3 = Layout;
const ColorBlock = styled_components__WEBPACK_IMPORTED_MODULE_4__["default"].div`
  width: 150px;
  height: 40px;
  background-color: ${_ref2 => {
  let {
    bColor
  } = _ref2;
  return bColor;
}};
  border: 1px solid black;
  border-radius: 5px;
`;
_c4 = ColorBlock;
const Wrapper = styled_components__WEBPACK_IMPORTED_MODULE_4__["default"].div`
  display: flex;
  flex-direction: column;
  margin: 20px;
  color: white;
`;
_c5 = Wrapper;
const BreakPointBox = styled_components__WEBPACK_IMPORTED_MODULE_4__["default"].div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  width: 450px;
  max-width: 550px;
  height: 200px;
  font-size: 25px;
  border: 1px solid black;
  color: white;
`;
_c6 = BreakPointBox;
Colors.parameters = {
  storySource: {
    source: "(args) => <Theme {...args} />"
  },
  ...Colors.parameters
};
Breakpoints.parameters = {
  storySource: {
    source: "(args) => <Theme {...args} />"
  },
  ...Breakpoints.parameters
};
var _c, _c2, _c3, _c4, _c5, _c6;
__webpack_require__.$Refresh$.register(_c, "Theme");
__webpack_require__.$Refresh$.register(_c2, "Template");
__webpack_require__.$Refresh$.register(_c3, "Layout");
__webpack_require__.$Refresh$.register(_c4, "ColorBlock");
__webpack_require__.$Refresh$.register(_c5, "Wrapper");
__webpack_require__.$Refresh$.register(_c6, "BreakPointBox");
const __namedExportsOrder = ["Colors", "Breakpoints"];

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=main.97a796f2a625233d63df.hot-update.js.map