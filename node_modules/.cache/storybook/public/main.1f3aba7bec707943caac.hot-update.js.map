{"version":3,"file":"main.1f3aba7bec707943caac.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AAGA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAjBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAUA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://app/./src/Components/cryptoIcon/cryptoIcon.tsx","webpack://app/./src/Components/numberInput/numberInput.tsx","webpack://app/./src/Components/theme/sizes.ts"],"sourcesContent":["import { FC } from 'react';\nimport styled from 'styled-components';\nimport { CryptoSymbols } from '../static/types/crypto';\nimport { IconSizes } from '../static/types/icons';\nimport { cryptoIcons } from '../static/images/icons/crypto';\nimport { iconSizes } from '../theme/sizes';\n\nexport interface CryptoIconProps {\n  cryptoSymbol: CryptoSymbols;\n  size?: IconSizes;\n}\n\nexport const CryptoIcon: FC<CryptoIconProps> = ({ size = 'small', cryptoSymbol }) => {\n  return (\n    <StyledImage\n      data-testid={`svg-icon-${cryptoSymbol}`}\n      alt={cryptoSymbol}\n      src={cryptoIcons[cryptoSymbol]}\n      width={iconSizes(size)}\n      height={iconSizes(size)}\n    />\n  );\n};\n\nconst StyledImage = styled.img`\n  /*\n* Target IE to respect aspect ratios and sizes for img tags containing SVG files\n*\n* [1] IE9\n* [2] IE10+\n*/\n  /* 1 */\n  .ie9 img[src$='.svg'] {\n    width: 100%;\n  }\n  /* 2 */\n  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n    img[src$='.svg'] {\n      width: 100%;\n    }\n  }\n`;\n","import { FunctionComponent } from 'react';\nimport styled, { css } from 'styled-components';\nimport { theme } from '../theme/';\nimport { ErrorMessage, Label, Container, StyledInput, ErrorWrapper } from '../input/input';\nimport { CryptoIcon } from '../cryptoIcon/cryptoIcon';\nimport { CryptoSymbols } from '../static/types/crypto';\n\nconst { black, grey300, blue100, blue500, error500, grey700 } = theme.colors;\n\nexport interface NumberInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n  block?: boolean;\n  handleMax?: () => void;\n  icon?: CryptoSymbols;\n  errorAction?: {\n    onClick: () => void;\n    text: string;\n  };\n  balanceAmount?: number | string;\n  balanceSize?: 'regular' | 'small';\n}\n\nexport const NumberInput: FunctionComponent<NumberInputProps> = ({\n  error,\n  label,\n  block = false,\n  handleMax,\n  icon,\n  errorAction,\n  balanceAmount,\n  balanceSize = 'regular',\n  ...props\n}) => {\n  const hasError = !!error?.trim();\n  const blockInvalidChar = e => ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault();\n\n  return (\n    <Container block={block}>\n      <InputHeader>\n        {label && <Label htmlFor={label}>{label}</Label>}\n        {balanceAmount && <Balance size={balanceSize}>Balance: {balanceAmount}</Balance>}\n      </InputHeader>\n      <InputContainer hasError={hasError}>\n        {icon && <CryptoIcon size=\"small\" cryptoSymbol={icon} />}\n        <CustomInput onKeyDown={blockInvalidChar} type=\"number\" id={label} {...props} />\n        {handleMax && <MaxButton onClick={handleMax}>Max</MaxButton>}\n      </InputContainer>\n      <ErrorWrapper>\n        {hasError && <ErrorMessage>{error}</ErrorMessage>}\n        {errorAction?.onClick && <button onClick={errorAction.onClick}>{errorAction.text}</button>}\n      </ErrorWrapper>\n    </Container>\n  );\n};\n\nconst InputContainer = styled.div<{ hasError: boolean }>`\n  display: flex;\n  border: 1px solid ${grey300};\n  border-radius: 8px;\n  width: auto;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 16px;\n  font-family: 'DM Sans';\n  margin: 12px 0;\n  box-sizing: border-box;\n\n  &:focus-within {\n    border-color: ${blue500};\n    color: ${black};\n  }\n\n  ${({ hasError }) =>\n    hasError &&\n    css`\n      border-color: ${error500};\n    `}\n`;\n\nconst CustomInput = styled(StyledInput)`\n  border: none;\n  margin: 0;\n`;\n\nconst MaxButton = styled.button`\n  background-color: ${blue100};\n  color: ${blue500};\n  border: none;\n  border-radius: 20px;\n  height: 24px;\n  padding: 2px 12px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  font-family: inherit;\n`;\n\nconst Balance = styled.div<{ size: 'regular' | 'small' }>`\n  font-size: ${({ size }) => (size === 'regular' ? '16px' : '14px')};\n  font-weight: 400;\n  color: ${grey700};\n  font-family: inherit;\n`;\n\nconst InputHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import { IconSizes } from \"../static/types/icons\";\n\nexport const buttonSizes = {\n  small: { width: \"69px\", height: \"24px\" },\n  medium: { width: \"116px\", height: \"40px\" },\n  large: { width: \"132px\", height: \"56px\" },\n};\n\nexport const iconSizes = (size: keyof IconSizes) => {\n  return {\n    xsmall: \"24px\",\n    small: \"32px\",\n    medium: \"40px\",\n    large: \"48px\",\n    xlarge: \"40px\",\n  }[size];\n};\n"],"names":[],"sourceRoot":""}