{"version":3,"file":"main.56aba042697b136524a0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAGA;AAAA;AAFA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAhBA;AAIA;AAAA;AAcA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://app/./src/component/theme/theme.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Story, Meta } from \\\"@storybook/react\\\";\\nimport { ReactElement } from \\\"react\\\";\\nimport { useWindowSize } from \\\"react-use\\\";\\nimport styled from \\\"styled-components\\\";\\nimport { theme, themeWithDarkMode } from \\\".\\\";\\nimport { MEDIA_WIDTHS } from \\\"./media\\\";\\n\\ninterface ThemeProps {\\n  darkTheme?: boolean;\\n  story?: \\\"colors\\\" | \\\"fonts\\\" | \\\"breakpoints\\\";\\n}\\n\\n//@ts-ignore\\nconst colorDisplay = (darkTheme) => {\\n  const display: ReactElement[] = [];\\n  for (const [key, value] of Object.entries(\\n    darkTheme ? themeWithDarkMode().colors : theme.colors\\n  ).sort(function (a, b) {\\n    const nameA = a[0].toLowerCase(),\\n      nameB = b[0].toLowerCase();\\n    if (nameA < nameB)\\n      //sort string ascending\\n      return -1;\\n    if (nameA > nameB) return 1;\\n    return 0; //default return value (no sorting)\\n  })) {\\n    display.push(\\n      <Wrapper>\\n        {key}\\n        <ColorBlock bColor={value} />\\n      </Wrapper>\\n    );\\n  }\\n  return display;\\n};\\n\\n//@ts-ignore\\nconst breakPointsDisplay = (width) => {\\n  const { small, medium } = MEDIA_WIDTHS;\\n  const getDeviceType = () => {\\n    if (width < small) {\\n      return \\\"Mobile\\\";\\n    }\\n    if (width > small && width < medium) {\\n      return \\\"Tablet\\\";\\n    }\\n    if (width > medium) {\\n      return \\\"Laptop\\\";\\n    }\\n    return;\\n  };\\n\\n  return (\\n    <Wrapper>\\n      Resize window to test\\n      <BreakPointBox>\\n        <div>\\n          Current Window Size:<b>{width}px</b>\\n        </div>\\n        <br />\\n        <br />\\n        <div>\\n          Type of Device:<b>{getDeviceType()}</b>\\n        </div>\\n      </BreakPointBox>\\n    </Wrapper>\\n  );\\n};\\n\\nconst Theme: React.FC<ThemeProps> = ({\\n  darkTheme = false,\\n  story = \\\"colors\\\",\\n}) => {\\n  const { width } = useWindowSize();\\n  const handleDisplay = () => {\\n    if (story === \\\"colors\\\") {\\n      return colorDisplay(darkTheme);\\n    }\\n\\n    if (story === \\\"breakpoints\\\") {\\n      return breakPointsDisplay(width);\\n    }\\n    return;\\n  };\\n  return <Layout>{handleDisplay()}</Layout>;\\n};\\n\\nexport default {\\n  component: Theme,\\n  title: \\\"Themes\\\",\\n} as Meta;\\n\\nconst Template: Story = (args) => <Theme {...args} />;\\n\\nexport const Colors = Template.bind({});\\n\\nColors.args = {\\n  darkTheme: false,\\n};\\n\\nexport const Breakpoints = Template.bind({});\\n\\nBreakpoints.args = {\\n  story: \\\"breakpoints\\\",\\n};\\n\\nconst Layout = styled.div`\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  border-radius: 5px;\\n`;\\ninterface DisplayProps {\\n  bColor?: string;\\n}\\nconst ColorBlock = styled.div<DisplayProps>`\\n  width: 150px;\\n  height: 40px;\\n  background-color: ${({ bColor }) => bColor};\\n  border: 1px solid black;\\n  border-radius: 5px;\\n`;\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  margin: 20px;\\n  color: white;\\n`;\\n\\nconst BreakPointBox = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 20px;\\n  width: 450px;\\n  max-width: 550px;\\n  height: 200px;\\n  font-size: 25px;\\n  border: 1px solid black;\\n  color: white;\\n`;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Colors\":{\"startLoc\":{\"col\":24,\"line\":93},\"endLoc\":{\"col\":53,\"line\":93},\"startBody\":{\"col\":24,\"line\":93},\"endBody\":{\"col\":53,\"line\":93}},\"Breakpoints\":{\"startLoc\":{\"col\":24,\"line\":93},\"endLoc\":{\"col\":53,\"line\":93},\"startBody\":{\"col\":24,\"line\":93},\"endBody\":{\"col\":53,\"line\":93}}};\n    \nimport { Story, Meta } from \"@storybook/react\";\nimport { ReactElement } from \"react\";\nimport { useWindowSize } from \"react-use\";\nimport styled from \"styled-components\";\nimport { theme, themeWithDarkMode } from \".\";\nimport { MEDIA_WIDTHS } from \"./media\";\n\ninterface ThemeProps {\n  darkTheme?: boolean;\n  story?: \"colors\" | \"fonts\" | \"breakpoints\";\n}\n\n//@ts-ignore\nconst colorDisplay = (darkTheme) => {\n  const display: ReactElement[] = [];\n  for (const [key, value] of Object.entries(\n    darkTheme ? themeWithDarkMode().colors : theme.colors\n  ).sort(function (a, b) {\n    const nameA = a[0].toLowerCase(),\n      nameB = b[0].toLowerCase();\n    if (nameA < nameB)\n      //sort string ascending\n      return -1;\n    if (nameA > nameB) return 1;\n    return 0; //default return value (no sorting)\n  })) {\n    display.push(\n      <Wrapper>\n        {key}\n        <ColorBlock bColor={value} />\n      </Wrapper>\n    );\n  }\n  return display;\n};\n\n//@ts-ignore\nconst breakPointsDisplay = (width) => {\n  const { small, medium } = MEDIA_WIDTHS;\n  const getDeviceType = () => {\n    if (width < small) {\n      return \"Mobile\";\n    }\n    if (width > small && width < medium) {\n      return \"Tablet\";\n    }\n    if (width > medium) {\n      return \"Laptop\";\n    }\n    return;\n  };\n\n  return (\n    <Wrapper>\n      Resize window to test\n      <BreakPointBox>\n        <div>\n          Current Window Size:<b>{width}px</b>\n        </div>\n        <br />\n        <br />\n        <div>\n          Type of Device:<b>{getDeviceType()}</b>\n        </div>\n      </BreakPointBox>\n    </Wrapper>\n  );\n};\n\nconst Theme: React.FC<ThemeProps> = ({\n  darkTheme = false,\n  story = \"colors\",\n}) => {\n  const { width } = useWindowSize();\n  const handleDisplay = () => {\n    if (story === \"colors\") {\n      return colorDisplay(darkTheme);\n    }\n\n    if (story === \"breakpoints\") {\n      return breakPointsDisplay(width);\n    }\n    return;\n  };\n  return <Layout>{handleDisplay()}</Layout>;\n};\n\nexport default {\n  component: Theme,\n  title: \"Themes\",\n} as Meta;\n\nconst Template: Story = (args) => <Theme {...args} />;\n\nexport const Colors = Template.bind({});;\n\nColors.args = {\n  darkTheme: false,\n};\n\nexport const Breakpoints = Template.bind({});\n\nBreakpoints.args = {\n  story: \"breakpoints\",\n};\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  border-radius: 5px;\n`;\ninterface DisplayProps {\n  bColor?: string;\n}\nconst ColorBlock = styled.div<DisplayProps>`\n  width: 150px;\n  height: 40px;\n  background-color: ${({ bColor }) => bColor};\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  color: white;\n`;\n\nconst BreakPointBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  width: 450px;\n  max-width: 550px;\n  height: 200px;\n  font-size: 25px;\n  border: 1px solid black;\n  color: white;\n`;\n\n\n\nColors.parameters = { storySource: { source: \"(args) => <Theme {...args} />\" }, ...Colors.parameters };\nBreakpoints.parameters = { storySource: { source: \"(args) => <Theme {...args} />\" }, ...Breakpoints.parameters };"],"names":[],"sourceRoot":""}