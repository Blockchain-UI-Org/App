{"version":3,"file":"main.4320d5806585f7d85dd6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAbA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://app/./src/Components/notification/notification.stories.tsx","webpack://app/./src/Components/notification/notification.tsx","webpack://app/./src/ sync ^\\.(?9afe"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Story, Meta } from '@storybook/react';\\nimport { Notification, NotificationProps } from './notification';\\n\\nexport default {\\n  component: Notification,\\n  title: 'Baseweb /Atoms/ Notification',\\n} as Meta;\\n\\nconst Template: Story<NotificationProps> = args => <Notification {...args}></Notification>;\\n\\nexport const Error = Template.bind({});\\n\\nError.args = {\\n  type: 'negative',\\n  message: 'Failed, add error message which can be long.',\\n};\\n\\nexport const Success = Template.bind({});\\n\\nSuccess.args = {\\n  type: 'positive',\\n  message: 'Success!',\\n};\\n\\nexport const Loading = Template.bind({});\\n\\nLoading.args = {\\n  type: 'loading',\\n  message: 'Confirming Transaction',\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Error\":{\"startLoc\":{\"col\":43,\"line\":9},\"endLoc\":{\"col\":90,\"line\":9},\"startBody\":{\"col\":43,\"line\":9},\"endBody\":{\"col\":90,\"line\":9}},\"Success\":{\"startLoc\":{\"col\":43,\"line\":9},\"endLoc\":{\"col\":90,\"line\":9},\"startBody\":{\"col\":43,\"line\":9},\"endBody\":{\"col\":90,\"line\":9}},\"Loading\":{\"startLoc\":{\"col\":43,\"line\":9},\"endLoc\":{\"col\":90,\"line\":9},\"startBody\":{\"col\":43,\"line\":9},\"endBody\":{\"col\":90,\"line\":9}}};\n    \nimport { Story, Meta } from '@storybook/react';\nimport { Notification, NotificationProps } from './notification';\n\nexport default {\n  component: Notification,\n  title: 'Baseweb /Atoms/ Notification',\n} as Meta;\n\nconst Template: Story<NotificationProps> = args => <Notification {...args}></Notification>;\n\nexport const Error = Template.bind({});;\n\nError.args = {\n  type: 'negative',\n  message: 'Failed, add error message which can be long.',\n};\n\nexport const Success = Template.bind({});;\n\nSuccess.args = {\n  type: 'positive',\n  message: 'Success!',\n};\n\nexport const Loading = Template.bind({});\n\nLoading.args = {\n  type: 'loading',\n  message: 'Confirming Transaction',\n};\n\n\n\nError.parameters = { storySource: { source: \"args => <Notification {...args}></Notification>\" }, ...Error.parameters };\nSuccess.parameters = { storySource: { source: \"args => <Notification {...args}></Notification>\" }, ...Success.parameters };\nLoading.parameters = { storySource: { source: \"args => <Notification {...args}></Notification>\" }, ...Loading.parameters };","import { FunctionComponent } from 'react';\nimport styled from 'styled-components';\nimport { theme } from '../theme/';\nimport Image from '../image/image';\nimport { regularIcons } from '../static/images/icons/regular/index';\n\nconst { success500, error500, white, black } = theme.colors;\n\ntype NotificationType = 'loading' | 'positive' | 'negative';\n\nconst TypeToColor: { [key in NotificationType]: string } = {\n  loading: white,\n  positive: success500,\n  negative: error500,\n};\n\ntype Icon = keyof typeof regularIcons;\n\nconst TypeToIcon: { [key in NotificationType]: Icon } = {\n  // TO-DO Update with final icons\n  loading: 'spinner',\n  positive: 'check',\n  negative: 'alertWarning',\n};\n\nexport interface NotificationProps {\n  message: string;\n  type: NotificationType;\n}\n\nexport const Notification: FunctionComponent<NotificationProps> = ({ type, message }) => {\n  const icon = TypeToIcon[type];\n  return (\n    <NotificationWrapper type={type}>\n      <Image height=\"24px\" width=\"24px\" name={icon} />\n      <span>{message}</span>\n    </NotificationWrapper>\n  );\n};\n\nconst NotificationWrapper = styled.div<{ type: NotificationType }>`\n  color: ${white};\n  font-size: 16px;\n  width: 280px;\n  margin: 0 auto;\n  background-color: ${({ type }) => TypeToColor[type]};\n  color: ${({ type }) => (type === 'loading' ? black : white)};\n  border-radius: 8px;\n  padding: 16px;\n  box-sizing: border-box;\n  display: flex;\n  gap: 12px;\n  box-shadow: 0px 4px 16px rgba(58, 78, 88, 0.15);\n`;\n","var map = {\n\t\"./Components/Button/Button.stories.tsx\": \"./src/Components/Button/Button.stories.tsx\",\n\t\"./Components/alert/alert.stories.tsx\": \"./src/Components/alert/alert.stories.tsx\",\n\t\"./Components/gradientProgressBar/gradientProgressBar.stories.tsx\": \"./src/Components/gradientProgressBar/gradientProgressBar.stories.tsx\",\n\t\"./Components/icon/cryptoIcon/cryptoIcon.stories.tsx\": \"./src/Components/icon/cryptoIcon/cryptoIcon.stories.tsx\",\n\t\"./Components/icon/icon.stories.tsx\": \"./src/Components/icon/icon.stories.tsx\",\n\t\"./Components/image/image.stories.tsx\": \"./src/Components/image/image.stories.tsx\",\n\t\"./Components/input/input.stories.tsx\": \"./src/Components/input/input.stories.tsx\",\n\t\"./Components/loadingSpinner/loadingSpinner.stories.tsx\": \"./src/Components/loadingSpinner/loadingSpinner.stories.tsx\",\n\t\"./Components/notification/notification.stories.tsx\": \"./src/Components/notification/notification.stories.tsx\",\n\t\"./Components/numberInput/numberInput.stories.tsx\": \"./src/Components/numberInput/numberInput.stories.tsx\",\n\t\"./Components/theme/theme.stories.tsx\": \"./src/Components/theme/theme.stories.tsx\",\n\t\"./Components/theme/typography/typography.stories.tsx\": \"./src/Components/theme/typography/typography.stories.tsx\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src sync recursive ^\\\\.(?:(?:^%7C\\\\/%7C(?:(?:(?%21(?:^%7C\\\\/)\\\\.).)*?)\\\\/)(?%21\\\\.)(?=.)[^/]*?\\\\.stories\\\\.(js%7Cjsx%7Cts%7Ctsx))$\";"],"names":[],"sourceRoot":""}