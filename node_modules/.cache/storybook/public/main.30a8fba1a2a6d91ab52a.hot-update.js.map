{"version":3,"file":"main.30a8fba1a2a6d91ab52a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAqBA;AAWA;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAAA;AARA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA","sources":["webpack://app/./src/components/Table/index.tsx"],"sourcesContent":["import React, { FC } from \"react\";\nimport { Body, Container, ColumnTitle, Header, Row, Cell } from \"./Styled\";\nimport Pagination from \"../PaginationV2\";\n\ntype Cell = string | number | React.ReactNode;\n\ntype Row = Cell[];\n\nexport interface TableProps {\n  alternateRowColor?: boolean;\n  columnTitles: string[];\n  columnWidths: string[];\n  rows: Row[];\n  addRowNumbers?: boolean;\n  pageNumber?: number;\n  setPageNumber?: (i: number) => void;\n  rowsPerPage?: number;\n  pagination?: boolean;\n  numberOfPages?: number;\n  hasPrev?: boolean;\n  hasNext?: boolean;\n}\n\nconst Table: FC<TableProps> = ({\n  alternateRowColor = false,\n  columnTitles,\n  columnWidths,\n  rows,\n  pageNumber = 0,\n  rowsPerPage = 100,\n  setPageNumber,\n  pagination,\n  hasPrev,\n  hasNext,\n}) => {\n  return (\n    <Container className=\"table\">\n      <Header className=\"tableHeader\">\n        {columnTitles.map((name, i) => {\n          return (\n            <ColumnTitle $width={columnWidths[i]} key={\"tableHeader \" + i}>\n              {name}\n            </ColumnTitle>\n          );\n        })}\n      </Header>\n\n      <Body>\n        {rows.map((row, index) => {\n          const evenNumber = Math.abs(index % 2) == 1; //condition to alternate row background color\n          return (\n            <Row\n              $alternateColor={alternateRowColor && evenNumber}\n              className={\"row \" + index}\n              key={\"row \" + index}\n            >\n              {row.map((cell, i) => {\n                return (\n                  <Cell $width={columnWidths[i]} key={\"tableCell \" + index + i}>\n                    {cell}\n                  </Cell>\n                );\n              })}\n            </Row>\n          );\n        })}\n      </Body>\n      {pagination && (\n        <Pagination\n          pageNumber={pageNumber}\n          //@ts-ignore\n          setPageNumber={setPageNumber}\n          hasPrev={hasPrev}\n          hasNext={hasNext}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Table;\n"],"names":[],"sourceRoot":""}