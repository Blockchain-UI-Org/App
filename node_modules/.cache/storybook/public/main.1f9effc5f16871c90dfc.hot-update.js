"use strict";
globalThis["webpackHotUpdateapp"]("main",{

/***/ "./src/component/theme/charts.ts":
/*!***************************************!*\
  !*** ./src/component/theme/charts.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseOptionChart)
/* harmony export */ });
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./colors */ "./src/component/theme/colors.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

// @mui


// ----------------------------------------------------------------------

function BaseOptionChart() {
  const LABEL_TOTAL = {
    show: true,
    label: "Total",
    color: "#FFFFF",
    fontSize: "12px"
  };
  const LABEL_VALUE = {
    offsetY: 8,
    color: "#FFFFF",
    fontSize: "12px"
  };
  return {
    // Colors
    colors: [_colors__WEBPACK_IMPORTED_MODULE_0__.colors.yellow.color, _colors__WEBPACK_IMPORTED_MODULE_0__.colors.blue.color, _colors__WEBPACK_IMPORTED_MODULE_0__.colors.red.color, _colors__WEBPACK_IMPORTED_MODULE_0__.colors.green.color],
    // Chart
    chart: {
      toolbar: {
        show: false
      },
      zoom: {
        enabled: false
      },
      // animations: { enabled: false },
      foreColor: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
    },
    // States
    states: {
      hover: {
        filter: {
          type: "lighten",
          value: 0.04
        }
      },
      active: {
        filter: {
          type: "darken",
          value: 0.88
        }
      }
    },
    // Fill
    fill: {
      opacity: 1,
      gradient: {
        type: "vertical",
        shadeIntensity: 0,
        opacityFrom: 0.4,
        opacityTo: 0,
        stops: [0, 100]
      }
    },
    // Datalabels
    dataLabels: {
      enabled: false
    },
    // Stroke
    stroke: {
      width: 3,
      curve: "smooth",
      lineCap: "round"
    },
    // Grid
    grid: {
      strokeDashArray: 3,
      borderColor: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey700
    },
    // Xaxis
    xaxis: {
      axisBorder: {
        show: false
      },
      axisTicks: {
        show: false
      }
    },
    // Markers
    markers: {
      size: 0,
      strokeColors: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
    },
    // Tooltip
    tooltip: {
      x: {
        show: false
      }
    },
    // Legend
    legend: {
      show: true,
      fontSize: String(13),
      position: "top",
      horizontalAlign: "right",
      markers: {
        radius: 12
      },
      fontWeight: 500,
      itemMargin: {
        horizontal: 12
      },
      labels: {
        colors: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
      }
    },
    // plotOptions
    plotOptions: {
      // Bar
      bar: {
        columnWidth: "28%",
        borderRadius: 4
      },
      // Pie + Donut
      pie: {
        donut: {
          labels: {
            show: true,
            value: LABEL_VALUE,
            total: LABEL_TOTAL
          }
        }
      },
      // Radialbar
      radialBar: {
        track: {
          strokeWidth: "100%",
          background: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
        },
        dataLabels: {
          value: LABEL_VALUE,
          total: LABEL_TOTAL
        }
      },
      // Radar
      radar: {
        polygons: {
          fill: {
            colors: ["transparent"]
          },
          strokeColors: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500,
          connectorColors: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
        }
      },
      // polarArea
      polarArea: {
        rings: {
          strokeColor: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
        },
        spokes: {
          connectorColors: _colors__WEBPACK_IMPORTED_MODULE_0__.legacyColors.grey500
        }
      }
    },
    // Responsive
    responsive: [{
      // sm
      breakpoint: theme.breakpoints.values.sm,
      options: {
        plotOptions: {
          bar: {
            columnWidth: "40%"
          }
        }
      }
    }, {
      // md
      breakpoint: theme.breakpoints.values.md,
      options: {
        plotOptions: {
          bar: {
            columnWidth: "32%"
          }
        }
      }
    }]
  };
}
_c = BaseOptionChart;
var _c;
__webpack_require__.$Refresh$.register(_c, "BaseOptionChart");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=main.1f9effc5f16871c90dfc.hot-update.js.map