"use strict";
globalThis["webpackHotUpdateapp"]("main",{

/***/ "./src/Components/baseWeb/overrides/input.ts":
/*!***************************************************!*\
  !*** ./src/Components/baseWeb/overrides/input.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inputOverrides": () => (/* binding */ inputOverrides)
/* harmony export */ });
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

const getBorderColor = ($disabled, $isFocused, $error, $positive, colors) => {
  if ($disabled) {
    return colors.borderStateDisabled;
  }
  if ($isFocused) {
    return colors.borderSelected;
  }
  if ($error) {
    return colors.inputBorderError;
  }
  if ($positive) {
    return colors.inputBorderPositive;
  }
  return colors.inputBorder;
};
const inputOverrides = theme => _ref => {
  let {
    $disabled,
    $error,
    $positive,
    $isFocused
  } = _ref;
  return {
    ...theme.borders.borderWidth100,
    borderColor: getBorderColor($disabled, $isFocused, $error, $positive, theme.colors)
  };
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});
//# sourceMappingURL=main.4e4af60018adac66d08c.hot-update.js.map