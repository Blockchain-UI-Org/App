"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sheet = require("./sheet");

var _injectStylePrefixed = _interopRequireDefault(require("../inject-style-prefixed"));

var _css = require("../css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env browser */
class StyletronClient {
  constructor(opts = {}) {
    this.opts = opts || {};
    this.cache = {};

    if (opts.container) {
      this.container = opts.container;
    } // hydration


    if (opts.hydrate && opts.hydrate.length > 1) {
      if (process.env.NODE_ENV !== "production") {
        // eslint-disable-next-line no-console
        console.warn("Client hydration expects only a single style tag from the server. Make sure your server uses styletron-engine-monolithic and not atomic.");
      }
    } else if (opts.hydrate && opts.hydrate.length === 1) {
      // infer container from parent element
      if (!this.container) {
        const parentElement = opts.hydrate[0].parentElement;

        if (parentElement !== null && parentElement !== void 0) {
          this.container = parentElement;
        }
      } // there is a single style tag coming from the monolithic server


      const element = opts.hydrate[0];
      const dataHydrate = element.getAttribute("data-hydrate");

      if (dataHydrate) {
        dataHydrate.split(" ").forEach(hashKey => {
          // cache keys are unique across fonts, keyframes and other css so
          // we use a single attribute to get them all
          this.cache[hashKey] = true;
        });
      }
    }

    if (!this.container) {
      if (document.head === null) {
        throw new Error("No container provided and `document.head` was null");
      }

      this.container = document.head;
    }

    this.styleSheet = new _sheet.StyleSheet({
      container: this.container,
      speedy: this.opts.speedy
    });
  }

  renderStyle(styles) {
    const className = (0, _css.hashCssObject)(styles);

    if (!this.cache[className]) {
      this.cache[className] = true;
      this.styleSheet.insert((0, _injectStylePrefixed.default)(styles, className, this.opts.prefix || "", Boolean(this.opts.strict)));
    }

    return `${this.opts.prefix || ""}css-${className}`;
  }

  renderFontFace(fontFace) {
    const fontName = (0, _css.hashCssObject)(fontFace);

    if (!this.cache[fontName]) {
      this.cache[fontName] = true;
      this.styleSheet.insert([(0, _css.fontFaceBlockToRule)(`${this.opts.prefix || ""}font-${fontName}`, (0, _css.declarationsToBlock)(fontFace))]);
    }

    return `${this.opts.prefix || ""}font-${fontName}`;
  }

  renderKeyframes(keyframes) {
    const animationName = (0, _css.hashCssObject)(keyframes);

    if (!this.cache[animationName]) {
      this.cache[animationName] = true;
      this.styleSheet.insert([(0, _css.keyframesBlockToRule)(`${this.opts.prefix || ""}animation-${animationName}`, (0, _css.keyframesToBlock)(keyframes))]);
    }

    return `${this.opts.prefix || ""}animation-${animationName}`;
  }

}

var _default = StyletronClient;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,