"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.declarationsToBlock = declarationsToBlock;
exports.fontFaceBlockToRule = fontFaceBlockToRule;
exports.hashCssObject = hashCssObject;
exports.keyframesBlockToRule = keyframesBlockToRule;
exports.keyframesToBlock = keyframesToBlock;

var _hyphenateStyleName = _interopRequireDefault(require("./hyphenate-style-name"));

var _validateKeyframesObject = _interopRequireDefault(require("./validate-keyframes-object"));

var _generateAlphabeticName = _interopRequireDefault(require("./generate-alphabetic-name"));

var _hash = require("./hash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hashCssObject(cssObject) {
  return (0, _generateAlphabeticName.default)((0, _hash.hash)(JSON.stringify(cssObject)));
}

function keyframesToBlock(keyframes) {
  if (process.env.NODE_ENV !== "production") {
    (0, _validateKeyframesObject.default)(keyframes);
  }

  if (process.env.NODE_ENV !== "production" && typeof Object.getPrototypeOf(keyframes) !== "undefined") {
    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
      // eslint-disable-next-line no-console
      console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
    }
  }

  let result = "";

  for (const animationState in keyframes) {
    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
  }

  return result;
}

function declarationsToBlock(style) {
  let css = "";

  for (const prop in style) {
    const val = style[prop];

    if (typeof val === "string" || typeof val === "number") {
      css += `${(0, _hyphenateStyleName.default)(prop)}:${val};`;
    }
  } // trim trailing semicolon


  return css.slice(0, -1);
}

function keyframesBlockToRule(id, block) {
  return `@keyframes ${id}{${block}}`;
}

function fontFaceBlockToRule(id, block) {
  return `@font-face{font-family:${id};${block}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYXNoQ3NzT2JqZWN0IiwiY3NzT2JqZWN0IiwiZ2VuZXJhdGVBbHBoYWJldGljTmFtZSIsImhhc2giLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5ZnJhbWVzVG9CbG9jayIsImtleWZyYW1lcyIsInZhbGlkYXRlS2V5ZnJhbWVzT2JqZWN0IiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zb2xlIiwid2FybiIsInJlc3VsdCIsImFuaW1hdGlvblN0YXRlIiwiZGVjbGFyYXRpb25zVG9CbG9jayIsInN0eWxlIiwiY3NzIiwicHJvcCIsInZhbCIsImh5cGhlbmF0ZSIsInNsaWNlIiwia2V5ZnJhbWVzQmxvY2tUb1J1bGUiLCJpZCIsImJsb2NrIiwiZm9udEZhY2VCbG9ja1RvUnVsZSJdLCJzb3VyY2VzIjpbInNyYy9jc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgX19ERVZfXzogYm9vbGVhbjtcblxuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tIFwiLi9oeXBoZW5hdGUtc3R5bGUtbmFtZVwiO1xuaW1wb3J0IHZhbGlkYXRlS2V5ZnJhbWVzT2JqZWN0IGZyb20gXCIuL3ZhbGlkYXRlLWtleWZyYW1lcy1vYmplY3RcIjtcbmltcG9ydCBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIGZyb20gXCIuL2dlbmVyYXRlLWFscGhhYmV0aWMtbmFtZVwiO1xuaW1wb3J0IHtoYXNofSBmcm9tIFwiLi9oYXNoXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgU3R5bGVPYmplY3QsXG4gIEZvbnRGYWNlT2JqZWN0LFxuICBLZXlmcmFtZXNPYmplY3QsXG59IGZyb20gXCJzdHlsZXRyb24tc3RhbmRhcmRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hDc3NPYmplY3QoXG4gIGNzc09iamVjdDogU3R5bGVPYmplY3QgfCBGb250RmFjZU9iamVjdCB8IEtleWZyYW1lc09iamVjdCxcbik6IHN0cmluZyB7XG4gIHJldHVybiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKGhhc2goSlNPTi5zdHJpbmdpZnkoY3NzT2JqZWN0KSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5ZnJhbWVzVG9CbG9jayhrZXlmcmFtZXM6IHtbeDogc3RyaW5nXTogYW55fSk6IHN0cmluZyB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgdmFsaWRhdGVLZXlmcmFtZXNPYmplY3Qoa2V5ZnJhbWVzKTtcbiAgfVxuICBpZiAoX19ERVZfXyAmJiB0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mKGtleWZyYW1lcykgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGtleWZyYW1lcykgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiT25seSBwbGFpbiBvYmplY3RzIHNob3VsZCBiZSB1c2VkIGFzIGFuaW1hdGlvbiB2YWx1ZXMuIFVuZXhwZWN0ZWRseSByZWNpZXZlZDpcIixcbiAgICAgICAga2V5ZnJhbWVzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGZvciAoY29uc3QgYW5pbWF0aW9uU3RhdGUgaW4ga2V5ZnJhbWVzKSB7XG4gICAgcmVzdWx0ICs9IGAke2FuaW1hdGlvblN0YXRlfXske2RlY2xhcmF0aW9uc1RvQmxvY2soXG4gICAgICBrZXlmcmFtZXNbYW5pbWF0aW9uU3RhdGVdLFxuICAgICl9fWA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uc1RvQmxvY2soc3R5bGU6IGFueSk6IHN0cmluZyB7XG4gIGxldCBjc3MgPSBcIlwiO1xuICBmb3IgKGNvbnN0IHByb3AgaW4gc3R5bGUpIHtcbiAgICBjb25zdCB2YWwgPSBzdHlsZVtwcm9wXTtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjc3MgKz0gYCR7aHlwaGVuYXRlKHByb3ApfToke3ZhbH07YDtcbiAgICB9XG4gIH1cbiAgLy8gdHJpbSB0cmFpbGluZyBzZW1pY29sb25cbiAgcmV0dXJuIGNzcy5zbGljZSgwLCAtMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlmcmFtZXNCbG9ja1RvUnVsZShpZDogc3RyaW5nLCBibG9jazogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBAa2V5ZnJhbWVzICR7aWR9eyR7YmxvY2t9fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb250RmFjZUJsb2NrVG9SdWxlKGlkOiBzdHJpbmcsIGJsb2NrOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYEBmb250LWZhY2V7Zm9udC1mYW1pbHk6JHtpZH07JHtibG9ja319YDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVFPLFNBQVNBLGFBQVQsQ0FDTEMsU0FESyxFQUVHO0VBQ1IsT0FBTyxJQUFBQywrQkFBQSxFQUF1QixJQUFBQyxVQUFBLEVBQUtDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixTQUFmLENBQUwsQ0FBdkIsQ0FBUDtBQUNEOztBQUVNLFNBQVNLLGdCQUFULENBQTBCQyxTQUExQixFQUFpRTtFQUN0RSwyQ0FBYTtJQUNYLElBQUFDLGdDQUFBLEVBQXdCRCxTQUF4QjtFQUNEOztFQUNELElBQUkseUNBQVcsT0FBT0UsTUFBTSxDQUFDQyxjQUFQLENBQXNCSCxTQUF0QixDQUFQLEtBQTRDLFdBQTNELEVBQXdFO0lBQ3RFLElBQUlFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkgsU0FBdEIsTUFBcUNFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQixFQUF0QixDQUF6QyxFQUFvRTtNQUNsRTtNQUNBQyxPQUFPLENBQUNDLElBQVIsQ0FDRSwrRUFERixFQUVFTCxTQUZGO0lBSUQ7RUFDRjs7RUFDRCxJQUFJTSxNQUFNLEdBQUcsRUFBYjs7RUFDQSxLQUFLLE1BQU1DLGNBQVgsSUFBNkJQLFNBQTdCLEVBQXdDO0lBQ3RDTSxNQUFNLElBQUssR0FBRUMsY0FBZSxJQUFHQyxtQkFBbUIsQ0FDaERSLFNBQVMsQ0FBQ08sY0FBRCxDQUR1QyxDQUVoRCxHQUZGO0VBR0Q7O0VBQ0QsT0FBT0QsTUFBUDtBQUNEOztBQUVNLFNBQVNFLG1CQUFULENBQTZCQyxLQUE3QixFQUFpRDtFQUN0RCxJQUFJQyxHQUFHLEdBQUcsRUFBVjs7RUFDQSxLQUFLLE1BQU1DLElBQVgsSUFBbUJGLEtBQW5CLEVBQTBCO0lBQ3hCLE1BQU1HLEdBQUcsR0FBR0gsS0FBSyxDQUFDRSxJQUFELENBQWpCOztJQUNBLElBQUksT0FBT0MsR0FBUCxLQUFlLFFBQWYsSUFBMkIsT0FBT0EsR0FBUCxLQUFlLFFBQTlDLEVBQXdEO01BQ3RERixHQUFHLElBQUssR0FBRSxJQUFBRywyQkFBQSxFQUFVRixJQUFWLENBQWdCLElBQUdDLEdBQUksR0FBakM7SUFDRDtFQUNGLENBUHFELENBUXREOzs7RUFDQSxPQUFPRixHQUFHLENBQUNJLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBQyxDQUFkLENBQVA7QUFDRDs7QUFFTSxTQUFTQyxvQkFBVCxDQUE4QkMsRUFBOUIsRUFBMENDLEtBQTFDLEVBQWlFO0VBQ3RFLE9BQVEsY0FBYUQsRUFBRyxJQUFHQyxLQUFNLEdBQWpDO0FBQ0Q7O0FBRU0sU0FBU0MsbUJBQVQsQ0FBNkJGLEVBQTdCLEVBQXlDQyxLQUF6QyxFQUFnRTtFQUNyRSxPQUFRLDBCQUF5QkQsRUFBRyxJQUFHQyxLQUFNLEdBQTdDO0FBQ0QifQ==