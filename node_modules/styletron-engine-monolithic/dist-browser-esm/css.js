import hyphenate from "./hyphenate-style-name";
import validateKeyframesObject from "./validate-keyframes-object";
import generateAlphabeticName from "./generate-alphabetic-name";
import { hash } from "./hash";
export function hashCssObject(cssObject) {
  return generateAlphabeticName(hash(JSON.stringify(cssObject)));
}
export function keyframesToBlock(keyframes) {
  if (process.env.NODE_ENV !== "production") {
    validateKeyframesObject(keyframes);
  }

  if (process.env.NODE_ENV !== "production" && typeof Object.getPrototypeOf(keyframes) !== "undefined") {
    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
      // eslint-disable-next-line no-console
      console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
    }
  }

  let result = "";

  for (const animationState in keyframes) {
    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
  }

  return result;
}
export function declarationsToBlock(style) {
  let css = "";

  for (const prop in style) {
    const val = style[prop];

    if (typeof val === "string" || typeof val === "number") {
      css += `${hyphenate(prop)}:${val};`;
    }
  } // trim trailing semicolon


  return css.slice(0, -1);
}
export function keyframesBlockToRule(id, block) {
  return `@keyframes ${id}{${block}}`;
}
export function fontFaceBlockToRule(id, block) {
  return `@font-face{font-family:${id};${block}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoeXBoZW5hdGUiLCJ2YWxpZGF0ZUtleWZyYW1lc09iamVjdCIsImdlbmVyYXRlQWxwaGFiZXRpY05hbWUiLCJoYXNoIiwiaGFzaENzc09iamVjdCIsImNzc09iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXlmcmFtZXNUb0Jsb2NrIiwia2V5ZnJhbWVzIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zb2xlIiwid2FybiIsInJlc3VsdCIsImFuaW1hdGlvblN0YXRlIiwiZGVjbGFyYXRpb25zVG9CbG9jayIsInN0eWxlIiwiY3NzIiwicHJvcCIsInZhbCIsInNsaWNlIiwia2V5ZnJhbWVzQmxvY2tUb1J1bGUiLCJpZCIsImJsb2NrIiwiZm9udEZhY2VCbG9ja1RvUnVsZSJdLCJzb3VyY2VzIjpbInNyYy9jc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgX19ERVZfXzogYm9vbGVhbjtcblxuaW1wb3J0IGh5cGhlbmF0ZSBmcm9tIFwiLi9oeXBoZW5hdGUtc3R5bGUtbmFtZVwiO1xuaW1wb3J0IHZhbGlkYXRlS2V5ZnJhbWVzT2JqZWN0IGZyb20gXCIuL3ZhbGlkYXRlLWtleWZyYW1lcy1vYmplY3RcIjtcbmltcG9ydCBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lIGZyb20gXCIuL2dlbmVyYXRlLWFscGhhYmV0aWMtbmFtZVwiO1xuaW1wb3J0IHtoYXNofSBmcm9tIFwiLi9oYXNoXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgU3R5bGVPYmplY3QsXG4gIEZvbnRGYWNlT2JqZWN0LFxuICBLZXlmcmFtZXNPYmplY3QsXG59IGZyb20gXCJzdHlsZXRyb24tc3RhbmRhcmRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hDc3NPYmplY3QoXG4gIGNzc09iamVjdDogU3R5bGVPYmplY3QgfCBGb250RmFjZU9iamVjdCB8IEtleWZyYW1lc09iamVjdCxcbik6IHN0cmluZyB7XG4gIHJldHVybiBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKGhhc2goSlNPTi5zdHJpbmdpZnkoY3NzT2JqZWN0KSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5ZnJhbWVzVG9CbG9jayhrZXlmcmFtZXM6IHtbeDogc3RyaW5nXTogYW55fSk6IHN0cmluZyB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgdmFsaWRhdGVLZXlmcmFtZXNPYmplY3Qoa2V5ZnJhbWVzKTtcbiAgfVxuICBpZiAoX19ERVZfXyAmJiB0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mKGtleWZyYW1lcykgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGtleWZyYW1lcykgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih7fSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiT25seSBwbGFpbiBvYmplY3RzIHNob3VsZCBiZSB1c2VkIGFzIGFuaW1hdGlvbiB2YWx1ZXMuIFVuZXhwZWN0ZWRseSByZWNpZXZlZDpcIixcbiAgICAgICAga2V5ZnJhbWVzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGZvciAoY29uc3QgYW5pbWF0aW9uU3RhdGUgaW4ga2V5ZnJhbWVzKSB7XG4gICAgcmVzdWx0ICs9IGAke2FuaW1hdGlvblN0YXRlfXske2RlY2xhcmF0aW9uc1RvQmxvY2soXG4gICAgICBrZXlmcmFtZXNbYW5pbWF0aW9uU3RhdGVdLFxuICAgICl9fWA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uc1RvQmxvY2soc3R5bGU6IGFueSk6IHN0cmluZyB7XG4gIGxldCBjc3MgPSBcIlwiO1xuICBmb3IgKGNvbnN0IHByb3AgaW4gc3R5bGUpIHtcbiAgICBjb25zdCB2YWwgPSBzdHlsZVtwcm9wXTtcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICBjc3MgKz0gYCR7aHlwaGVuYXRlKHByb3ApfToke3ZhbH07YDtcbiAgICB9XG4gIH1cbiAgLy8gdHJpbSB0cmFpbGluZyBzZW1pY29sb25cbiAgcmV0dXJuIGNzcy5zbGljZSgwLCAtMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlmcmFtZXNCbG9ja1RvUnVsZShpZDogc3RyaW5nLCBibG9jazogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBAa2V5ZnJhbWVzICR7aWR9eyR7YmxvY2t9fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb250RmFjZUJsb2NrVG9SdWxlKGlkOiBzdHJpbmcsIGJsb2NrOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYEBmb250LWZhY2V7Zm9udC1mYW1pbHk6JHtpZH07JHtibG9ja319YDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBRUEsT0FBT0EsU0FBUCxNQUFzQix3QkFBdEI7QUFDQSxPQUFPQyx1QkFBUCxNQUFvQyw2QkFBcEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQyw0QkFBbkM7QUFDQSxTQUFRQyxJQUFSLFFBQW1CLFFBQW5CO0FBUUEsT0FBTyxTQUFTQyxhQUFULENBQ0xDLFNBREssRUFFRztFQUNSLE9BQU9ILHNCQUFzQixDQUFDQyxJQUFJLENBQUNHLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixTQUFmLENBQUQsQ0FBTCxDQUE3QjtBQUNEO0FBRUQsT0FBTyxTQUFTRyxnQkFBVCxDQUEwQkMsU0FBMUIsRUFBaUU7RUFDdEUsMkNBQWE7SUFDWFIsdUJBQXVCLENBQUNRLFNBQUQsQ0FBdkI7RUFDRDs7RUFDRCxJQUFJLHlDQUFXLE9BQU9DLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkYsU0FBdEIsQ0FBUCxLQUE0QyxXQUEzRCxFQUF3RTtJQUN0RSxJQUFJQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JGLFNBQXRCLE1BQXFDQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsRUFBdEIsQ0FBekMsRUFBb0U7TUFDbEU7TUFDQUMsT0FBTyxDQUFDQyxJQUFSLENBQ0UsK0VBREYsRUFFRUosU0FGRjtJQUlEO0VBQ0Y7O0VBQ0QsSUFBSUssTUFBTSxHQUFHLEVBQWI7O0VBQ0EsS0FBSyxNQUFNQyxjQUFYLElBQTZCTixTQUE3QixFQUF3QztJQUN0Q0ssTUFBTSxJQUFLLEdBQUVDLGNBQWUsSUFBR0MsbUJBQW1CLENBQ2hEUCxTQUFTLENBQUNNLGNBQUQsQ0FEdUMsQ0FFaEQsR0FGRjtFQUdEOztFQUNELE9BQU9ELE1BQVA7QUFDRDtBQUVELE9BQU8sU0FBU0UsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQWlEO0VBQ3RELElBQUlDLEdBQUcsR0FBRyxFQUFWOztFQUNBLEtBQUssTUFBTUMsSUFBWCxJQUFtQkYsS0FBbkIsRUFBMEI7SUFDeEIsTUFBTUcsR0FBRyxHQUFHSCxLQUFLLENBQUNFLElBQUQsQ0FBakI7O0lBQ0EsSUFBSSxPQUFPQyxHQUFQLEtBQWUsUUFBZixJQUEyQixPQUFPQSxHQUFQLEtBQWUsUUFBOUMsRUFBd0Q7TUFDdERGLEdBQUcsSUFBSyxHQUFFbEIsU0FBUyxDQUFDbUIsSUFBRCxDQUFPLElBQUdDLEdBQUksR0FBakM7SUFDRDtFQUNGLENBUHFELENBUXREOzs7RUFDQSxPQUFPRixHQUFHLENBQUNHLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBQyxDQUFkLENBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0Msb0JBQVQsQ0FBOEJDLEVBQTlCLEVBQTBDQyxLQUExQyxFQUFpRTtFQUN0RSxPQUFRLGNBQWFELEVBQUcsSUFBR0MsS0FBTSxHQUFqQztBQUNEO0FBRUQsT0FBTyxTQUFTQyxtQkFBVCxDQUE2QkYsRUFBN0IsRUFBeUNDLEtBQXpDLEVBQWdFO0VBQ3JFLE9BQVEsMEJBQXlCRCxFQUFHLElBQUdDLEtBQU0sR0FBN0M7QUFDRCJ9