import injectStylePrefixed from "../inject-style-prefixed";
import { keyframesToBlock, keyframesBlockToRule, fontFaceBlockToRule, declarationsToBlock, hashCssObject } from "../css";

class StyletronServer {
  constructor(opts = {}) {
    this.opts = opts || {};
    this.cache = {};
  }

  renderStyle(styles) {
    const className = hashCssObject(styles);

    if (!this.cache[className]) {
      this.cache[className] = injectStylePrefixed(styles, className, this.opts.prefix || "", Boolean(this.opts.strict)).join("");
    }

    return `${this.opts.prefix || ""}css-${className}`;
  }

  renderFontFace(fontFace) {
    const fontName = hashCssObject(fontFace);

    if (!this.cache[fontName]) {
      this.cache[fontName] = fontFaceBlockToRule(`${this.opts.prefix || ""}font-${fontName}`, declarationsToBlock(fontFace));
    }

    return `${this.opts.prefix || ""}font-${fontName}`;
  }

  renderKeyframes(keyframes) {
    const animationName = hashCssObject(keyframes);

    if (!this.cache[animationName]) {
      this.cache[animationName] = keyframesBlockToRule(`${this.opts.prefix || ""}animation-${animationName}`, keyframesToBlock(keyframes));
    }

    return `${this.opts.prefix || ""}animation-${animationName}`;
  }

  getStylesheets() {
    const hashedNames = [...Object.keys(this.cache)];
    return [{
      css: this.getCss(),
      attrs: {
        "data-hydrate": hashedNames.join(" ")
      }
    }];
  }

  getStylesheetsHtml(className = "_styletron_hydrate_") {
    return generateHtmlString(this.getStylesheets(), className);
  }

  getCss() {
    return [...Object.values(this.cache)].join("");
  }

}

export function generateHtmlString(sheets, className) {
  let html = "";

  for (let i = 0; i < sheets.length; i++) {
    const sheet = sheets[i];
    const {
      class: originalClassName,
      ...rest
    } = sheet.attrs;
    const attrs = {
      class: originalClassName ? `${className} ${originalClassName}` : className,
      ...rest
    };
    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;
  }

  return html;
}

function attrsToString(attrs) {
  let result = "";

  for (const attr in attrs) {
    const value = attrs[attr];

    if (value === true) {
      result += " " + attr;
    } else if (value !== false) {
      result += ` ${attr}="${value}"`;
    }
  }

  return result;
}

export default StyletronServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmplY3RTdHlsZVByZWZpeGVkIiwia2V5ZnJhbWVzVG9CbG9jayIsImtleWZyYW1lc0Jsb2NrVG9SdWxlIiwiZm9udEZhY2VCbG9ja1RvUnVsZSIsImRlY2xhcmF0aW9uc1RvQmxvY2siLCJoYXNoQ3NzT2JqZWN0IiwiU3R5bGV0cm9uU2VydmVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiY2FjaGUiLCJyZW5kZXJTdHlsZSIsInN0eWxlcyIsImNsYXNzTmFtZSIsInByZWZpeCIsIkJvb2xlYW4iLCJzdHJpY3QiLCJqb2luIiwicmVuZGVyRm9udEZhY2UiLCJmb250RmFjZSIsImZvbnROYW1lIiwicmVuZGVyS2V5ZnJhbWVzIiwia2V5ZnJhbWVzIiwiYW5pbWF0aW9uTmFtZSIsImdldFN0eWxlc2hlZXRzIiwiaGFzaGVkTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiY3NzIiwiZ2V0Q3NzIiwiYXR0cnMiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJnZW5lcmF0ZUh0bWxTdHJpbmciLCJ2YWx1ZXMiLCJzaGVldHMiLCJodG1sIiwiaSIsImxlbmd0aCIsInNoZWV0IiwiY2xhc3MiLCJvcmlnaW5hbENsYXNzTmFtZSIsInJlc3QiLCJhdHRyc1RvU3RyaW5nIiwicmVzdWx0IiwiYXR0ciIsInZhbHVlIl0sInNvdXJjZXMiOlsic3JjL3NlcnZlci9zZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1N0YW5kYXJkRW5naW5lfSBmcm9tIFwic3R5bGV0cm9uLXN0YW5kYXJkXCI7XG5pbXBvcnQgaW5qZWN0U3R5bGVQcmVmaXhlZCBmcm9tIFwiLi4vaW5qZWN0LXN0eWxlLXByZWZpeGVkXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgU3R5bGVPYmplY3QsXG4gIEZvbnRGYWNlT2JqZWN0LFxuICBLZXlmcmFtZXNPYmplY3QsXG59IGZyb20gXCJzdHlsZXRyb24tc3RhbmRhcmRcIjtcblxuaW1wb3J0IHtcbiAga2V5ZnJhbWVzVG9CbG9jayxcbiAga2V5ZnJhbWVzQmxvY2tUb1J1bGUsXG4gIGZvbnRGYWNlQmxvY2tUb1J1bGUsXG4gIGRlY2xhcmF0aW9uc1RvQmxvY2ssXG4gIGhhc2hDc3NPYmplY3QsXG59IGZyb20gXCIuLi9jc3NcIjtcblxuZXhwb3J0IHR5cGUgc2hlZXRUID0ge1xuICBjc3M6IHN0cmluZztcbiAgYXR0cnM6IHtcbiAgICBbeDogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xufTtcblxuZXhwb3J0IHR5cGUgb3B0aW9uc1QgPSB7XG4gIHByZWZpeD86IHN0cmluZztcbiAgc3RyaWN0PzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIGNhY2hlVCA9IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xufTtcblxuY2xhc3MgU3R5bGV0cm9uU2VydmVyIGltcGxlbWVudHMgU3RhbmRhcmRFbmdpbmUge1xuICBjYWNoZTogY2FjaGVUO1xuICBvcHRzOiBvcHRpb25zVDtcblxuICBjb25zdHJ1Y3RvcihvcHRzOiBvcHRpb25zVCA9IHt9KSB7XG4gICAgdGhpcy5vcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gIH1cblxuICByZW5kZXJTdHlsZShzdHlsZXM6IFN0eWxlT2JqZWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBoYXNoQ3NzT2JqZWN0KHN0eWxlcyk7XG4gICAgaWYgKCF0aGlzLmNhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgIHRoaXMuY2FjaGVbY2xhc3NOYW1lXSA9IGluamVjdFN0eWxlUHJlZml4ZWQoXG4gICAgICAgIHN0eWxlcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICB0aGlzLm9wdHMucHJlZml4IHx8IFwiXCIsXG4gICAgICAgIEJvb2xlYW4odGhpcy5vcHRzLnN0cmljdCksXG4gICAgICApLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLm9wdHMucHJlZml4IHx8IFwiXCJ9Y3NzLSR7Y2xhc3NOYW1lfWA7XG4gIH1cblxuICByZW5kZXJGb250RmFjZShmb250RmFjZTogRm9udEZhY2VPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZvbnROYW1lID0gaGFzaENzc09iamVjdChmb250RmFjZSk7XG4gICAgaWYgKCF0aGlzLmNhY2hlW2ZvbnROYW1lXSkge1xuICAgICAgdGhpcy5jYWNoZVtmb250TmFtZV0gPSBmb250RmFjZUJsb2NrVG9SdWxlKFxuICAgICAgICBgJHt0aGlzLm9wdHMucHJlZml4IHx8IFwiXCJ9Zm9udC0ke2ZvbnROYW1lfWAsXG4gICAgICAgIGRlY2xhcmF0aW9uc1RvQmxvY2soZm9udEZhY2UpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMub3B0cy5wcmVmaXggfHwgXCJcIn1mb250LSR7Zm9udE5hbWV9YDtcbiAgfVxuXG4gIHJlbmRlcktleWZyYW1lcyhrZXlmcmFtZXM6IEtleWZyYW1lc09iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgYW5pbWF0aW9uTmFtZSA9IGhhc2hDc3NPYmplY3Qoa2V5ZnJhbWVzKTtcbiAgICBpZiAoIXRoaXMuY2FjaGVbYW5pbWF0aW9uTmFtZV0pIHtcbiAgICAgIHRoaXMuY2FjaGVbYW5pbWF0aW9uTmFtZV0gPSBrZXlmcmFtZXNCbG9ja1RvUnVsZShcbiAgICAgICAgYCR7dGhpcy5vcHRzLnByZWZpeCB8fCBcIlwifWFuaW1hdGlvbi0ke2FuaW1hdGlvbk5hbWV9YCxcbiAgICAgICAga2V5ZnJhbWVzVG9CbG9jayhrZXlmcmFtZXMpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMub3B0cy5wcmVmaXggfHwgXCJcIn1hbmltYXRpb24tJHthbmltYXRpb25OYW1lfWA7XG4gIH1cblxuICBnZXRTdHlsZXNoZWV0cygpOiBBcnJheTxzaGVldFQ+IHtcbiAgICBjb25zdCBoYXNoZWROYW1lcyA9IFsuLi5PYmplY3Qua2V5cyh0aGlzLmNhY2hlKV07XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgY3NzOiB0aGlzLmdldENzcygpLFxuICAgICAgICBhdHRyczoge1wiZGF0YS1oeWRyYXRlXCI6IGhhc2hlZE5hbWVzLmpvaW4oXCIgXCIpfSxcbiAgICAgIH0sXG4gICAgXTtcbiAgfVxuXG4gIGdldFN0eWxlc2hlZXRzSHRtbChjbGFzc05hbWU6IHN0cmluZyA9IFwiX3N0eWxldHJvbl9oeWRyYXRlX1wiKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlSHRtbFN0cmluZyh0aGlzLmdldFN0eWxlc2hlZXRzKCksIGNsYXNzTmFtZSk7XG4gIH1cblxuICBnZXRDc3MoKSB7XG4gICAgcmV0dXJuIFsuLi5PYmplY3QudmFsdWVzKHRoaXMuY2FjaGUpXS5qb2luKFwiXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUh0bWxTdHJpbmcoc2hlZXRzOiBBcnJheTxzaGVldFQ+LCBjbGFzc05hbWU6IHN0cmluZykge1xuICBsZXQgaHRtbCA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2hlZXQgPSBzaGVldHNbaV07XG4gICAgY29uc3Qge2NsYXNzOiBvcmlnaW5hbENsYXNzTmFtZSwgLi4ucmVzdH0gPSBzaGVldC5hdHRycztcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIGNsYXNzOiBvcmlnaW5hbENsYXNzTmFtZVxuICAgICAgICA/IGAke2NsYXNzTmFtZX0gJHtvcmlnaW5hbENsYXNzTmFtZX1gXG4gICAgICAgIDogY2xhc3NOYW1lLFxuICAgICAgLi4ucmVzdCxcbiAgICB9O1xuICAgIGh0bWwgKz0gYDxzdHlsZSR7YXR0cnNUb1N0cmluZyhhdHRycyl9PiR7c2hlZXQuY3NzfTwvc3R5bGU+YDtcbiAgfVxuICByZXR1cm4gaHRtbDtcbn1cblxuZnVuY3Rpb24gYXR0cnNUb1N0cmluZyhhdHRycykge1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgZm9yIChjb25zdCBhdHRyIGluIGF0dHJzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhdHRyc1thdHRyXTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICAgIHJlc3VsdCArPSBcIiBcIiArIGF0dHI7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlc3VsdCArPSBgICR7YXR0cn09XCIke3ZhbHVlfVwiYDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGV0cm9uU2VydmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxPQUFPQSxtQkFBUCxNQUFnQywwQkFBaEM7QUFRQSxTQUNFQyxnQkFERixFQUVFQyxvQkFGRixFQUdFQyxtQkFIRixFQUlFQyxtQkFKRixFQUtFQyxhQUxGLFFBTU8sUUFOUDs7QUF3QkEsTUFBTUMsZUFBTixDQUFnRDtFQUk5Q0MsV0FBVyxDQUFDQyxJQUFjLEdBQUcsRUFBbEIsRUFBc0I7SUFDL0IsS0FBS0EsSUFBTCxHQUFZQSxJQUFJLElBQUksRUFBcEI7SUFDQSxLQUFLQyxLQUFMLEdBQWEsRUFBYjtFQUNEOztFQUVEQyxXQUFXLENBQUNDLE1BQUQsRUFBOEI7SUFDdkMsTUFBTUMsU0FBUyxHQUFHUCxhQUFhLENBQUNNLE1BQUQsQ0FBL0I7O0lBQ0EsSUFBSSxDQUFDLEtBQUtGLEtBQUwsQ0FBV0csU0FBWCxDQUFMLEVBQTRCO01BQzFCLEtBQUtILEtBQUwsQ0FBV0csU0FBWCxJQUF3QlosbUJBQW1CLENBQ3pDVyxNQUR5QyxFQUV6Q0MsU0FGeUMsRUFHekMsS0FBS0osSUFBTCxDQUFVSyxNQUFWLElBQW9CLEVBSHFCLEVBSXpDQyxPQUFPLENBQUMsS0FBS04sSUFBTCxDQUFVTyxNQUFYLENBSmtDLENBQW5CLENBS3RCQyxJQUxzQixDQUtqQixFQUxpQixDQUF4QjtJQU1EOztJQUNELE9BQVEsR0FBRSxLQUFLUixJQUFMLENBQVVLLE1BQVYsSUFBb0IsRUFBRyxPQUFNRCxTQUFVLEVBQWpEO0VBQ0Q7O0VBRURLLGNBQWMsQ0FBQ0MsUUFBRCxFQUFtQztJQUMvQyxNQUFNQyxRQUFRLEdB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