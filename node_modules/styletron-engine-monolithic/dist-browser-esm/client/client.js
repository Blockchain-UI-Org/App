/* eslint-env browser */
import { StyleSheet } from "./sheet";
import injectStylePrefixed from "../inject-style-prefixed";
import { keyframesBlockToRule, declarationsToBlock, keyframesToBlock, fontFaceBlockToRule, hashCssObject } from "../css";

class StyletronClient {
  constructor(opts = {}) {
    this.opts = opts || {};
    this.cache = {};

    if (opts.container) {
      this.container = opts.container;
    } // hydration


    if (opts.hydrate && opts.hydrate.length > 1) {
      if (process.env.NODE_ENV !== "production") {
        // eslint-disable-next-line no-console
        console.warn("Client hydration expects only a single style tag from the server. Make sure your server uses styletron-engine-monolithic and not atomic.");
      }
    } else if (opts.hydrate && opts.hydrate.length === 1) {
      // infer container from parent element
      if (!this.container) {
        const parentElement = opts.hydrate[0].parentElement;

        if (parentElement !== null && parentElement !== void 0) {
          this.container = parentElement;
        }
      } // there is a single style tag coming from the monolithic server


      const element = opts.hydrate[0];
      const dataHydrate = element.getAttribute("data-hydrate");

      if (dataHydrate) {
        dataHydrate.split(" ").forEach(hashKey => {
          // cache keys are unique across fonts, keyframes and other css so
          // we use a single attribute to get them all
          this.cache[hashKey] = true;
        });
      }
    }

    if (!this.container) {
      if (document.head === null) {
        throw new Error("No container provided and `document.head` was null");
      }

      this.container = document.head;
    }

    this.styleSheet = new StyleSheet({
      container: this.container,
      speedy: this.opts.speedy
    });
  }

  renderStyle(styles) {
    const className = hashCssObject(styles);

    if (!this.cache[className]) {
      this.cache[className] = true;
      this.styleSheet.insert(injectStylePrefixed(styles, className, this.opts.prefix || "", Boolean(this.opts.strict)));
    }

    return `${this.opts.prefix || ""}css-${className}`;
  }

  renderFontFace(fontFace) {
    const fontName = hashCssObject(fontFace);

    if (!this.cache[fontName]) {
      this.cache[fontName] = true;
      this.styleSheet.insert([fontFaceBlockToRule(`${this.opts.prefix || ""}font-${fontName}`, declarationsToBlock(fontFace))]);
    }

    return `${this.opts.prefix || ""}font-${fontName}`;
  }

  renderKeyframes(keyframes) {
    const animationName = hashCssObject(keyframes);

    if (!this.cache[animationName]) {
      this.cache[animationName] = true;
      this.styleSheet.insert([keyframesBlockToRule(`${this.opts.prefix || ""}animation-${animationName}`, keyframesToBlock(keyframes))]);
    }

    return `${this.opts.prefix || ""}animation-${animationName}`;
  }

}

export default StyletronClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZVNoZWV0IiwiaW5qZWN0U3R5bGVQcmVmaXhlZCIsImtleWZyYW1lc0Jsb2NrVG9SdWxlIiwiZGVjbGFyYXRpb25zVG9CbG9jayIsImtleWZyYW1lc1RvQmxvY2siLCJmb250RmFjZUJsb2NrVG9SdWxlIiwiaGFzaENzc09iamVjdCIsIlN0eWxldHJvbkNsaWVudCIsImNvbnN0cnVjdG9yIiwib3B0cyIsImNhY2hlIiwiY29udGFpbmVyIiwiaHlkcmF0ZSIsImxlbmd0aCIsImNvbnNvbGUiLCJ3YXJuIiwicGFyZW50RWxlbWVudCIsImVsZW1lbnQiLCJkYXRhSHlkcmF0ZSIsImdldEF0dHJpYnV0ZSIsInNwbGl0IiwiZm9yRWFjaCIsImhhc2hLZXkiLCJkb2N1bWVudCIsImhlYWQiLCJFcnJvciIsInN0eWxlU2hlZXQiLCJzcGVlZHkiLCJyZW5kZXJTdHlsZSIsInN0eWxlcyIsImNsYXNzTmFtZSIsImluc2VydCIsInByZWZpeCIsIkJvb2xlYW4iLCJzdHJpY3QiLCJyZW5kZXJGb250RmFjZSIsImZvbnRGYWNlIiwiZm9udE5hbWUiLCJyZW5kZXJLZXlmcmFtZXMiLCJrZXlmcmFtZXMiLCJhbmltYXRpb25OYW1lIl0sInNvdXJjZXMiOlsic3JjL2NsaWVudC9jbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmltcG9ydCB7U3R5bGVTaGVldH0gZnJvbSBcIi4vc2hlZXRcIjtcblxuaW1wb3J0IHR5cGUge1xuICBTdGFuZGFyZEVuZ2luZSxcbiAgS2V5ZnJhbWVzT2JqZWN0LFxuICBGb250RmFjZU9iamVjdCxcbiAgU3R5bGVPYmplY3QsXG59IGZyb20gXCJzdHlsZXRyb24tc3RhbmRhcmRcIjtcblxuaW1wb3J0IGluamVjdFN0eWxlUHJlZml4ZWQgZnJvbSBcIi4uL2luamVjdC1zdHlsZS1wcmVmaXhlZFwiO1xuXG5pbXBvcnQge1xuICBrZXlmcmFtZXNCbG9ja1RvUnVsZSxcbiAgZGVjbGFyYXRpb25zVG9CbG9jayxcbiAga2V5ZnJhbWVzVG9CbG9jayxcbiAgZm9udEZhY2VCbG9ja1RvUnVsZSxcbiAgaGFzaENzc09iamVjdCxcbn0gZnJvbSBcIi4uL2Nzc1wiO1xuXG5kZWNsYXJlIHZhciBfX0RFVl9fOiBib29sZWFuO1xudHlwZSBoeWRyYXRlVCA9IEhUTUxDb2xsZWN0aW9uIHwgQXJyYXk8SFRNTFN0eWxlRWxlbWVudD4gfCBOb2RlTGlzdDtcblxudHlwZSBvcHRpb25zVCA9IHtcbiAgaHlkcmF0ZT86IGh5ZHJhdGVUO1xuICBjb250YWluZXI/OiBFbGVtZW50O1xuICBwcmVmaXg/OiBzdHJpbmc7XG4gIHN0cmljdD86IGJvb2xlYW47XG4gIHNwZWVkeT86IGJvb2xlYW47XG59O1xuXG50eXBlIGNhY2hlVCA9IHtcbiAgW2tleTogc3RyaW5nXTogdHJ1ZTtcbn07XG5cbmNsYXNzIFN0eWxldHJvbkNsaWVudCBpbXBsZW1lbnRzIFN0YW5kYXJkRW5naW5lIHtcbiAgY29udGFpbmVyOiBFbGVtZW50O1xuICBvcHRzOiBvcHRpb25zVDtcbiAgc3R5bGVTaGVldDogU3R5bGVTaGVldDtcbiAgY2FjaGU6IGNhY2hlVDtcblxuICBjb25zdHJ1Y3RvcihvcHRzOiBvcHRpb25zVCA9IHt9KSB7XG4gICAgdGhpcy5vcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLmNhY2hlID0ge307XG5cbiAgICBpZiAob3B0cy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gb3B0cy5jb250YWluZXI7XG4gICAgfVxuXG4gICAgLy8gaHlkcmF0aW9uXG4gICAgaWYgKG9wdHMuaHlkcmF0ZSAmJiBvcHRzLmh5ZHJhdGUubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIFwiQ2xpZW50IGh5ZHJhdGlvbiBleHBlY3RzIG9ubHkgYSBzaW5nbGUgc3R5bGUgdGFnIGZyb20gdGhlIHNlcnZlci4gTWFrZSBzdXJlIHlvdXIgc2VydmVyIHVzZXMgc3R5bGV0cm9uLWVuZ2luZS1tb25vbGl0aGljIGFuZCBub3QgYXRvbWljLlwiLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0cy5oeWRyYXRlICYmIG9wdHMuaHlkcmF0ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIGluZmVyIGNvbnRhaW5lciBmcm9tIHBhcmVudCBlbGVtZW50XG4gICAgICBpZiAoIXRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBvcHRzLmh5ZHJhdGVbMF0ucGFyZW50RWxlbWVudDtcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQgIT09IG51bGwgJiYgcGFyZW50RWxlbWVudCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGhpcy5jb250YWluZXIgPSBwYXJlbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyB0aGVyZSBpcyBhIHNpbmdsZSBzdHlsZSB0YWcgY29taW5nIGZyb20gdGhlIG1vbm9saXRoaWMgc2VydmVyXG4gICAgICBjb25zdCBlbGVtZW50ID0gb3B0cy5oeWRyYXRlWzBdO1xuICAgICAgY29uc3QgZGF0YUh5ZHJhdGUgPSAoZWxlbWVudCBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWh5ZHJhdGVcIik7XG4gICAgICBpZiAoZGF0YUh5ZHJhdGUpIHtcbiAgICAgICAgZGF0YUh5ZHJhdGUuc3BsaXQoXCIgXCIpLmZvckVhY2goaGFzaEtleSA9PiB7XG4gICAgICAgICAgLy8gY2FjaGUga2V5cyBhcmUgdW5pcXVlIGFjcm9zcyBmb250cywga2V5ZnJhbWVzIGFuZCBvdGhlciBjc3Mgc29cbiAgICAgICAgICAvLyB3ZSB1c2UgYSBzaW5nbGUgYXR0cmlidXRlIHRvIGdldCB0aGVtIGFsbFxuICAgICAgICAgIHRoaXMuY2FjaGVbaGFzaEtleV0gPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuY29udGFpbmVyKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuaGVhZCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBjb250YWluZXIgcHJvdmlkZWQgYW5kIGBkb2N1bWVudC5oZWFkYCB3YXMgbnVsbFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuaGVhZDtcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiB0aGlzLm9wdHMuc3BlZWR5LFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyU3R5bGUoc3R5bGVzOiBTdHlsZU9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NOYW1lID0gaGFzaENzc09iamVjdChzdHlsZXMpO1xuICAgIGlmICghdGhpcy5jYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICB0aGlzLmNhY2hlW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgdGhpcy5zdHlsZVNoZWV0Lmluc2VydChcbiAgICAgICAgaW5qZWN0U3R5bGVQcmVmaXhlZChcbiAgICAgICAgICBzdHlsZXMsXG4gICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgIHRoaXMub3B0cy5wcmVmaXggfHwgXCJcIixcbiAgICAgICAgICBCb29sZWFuKHRoaXMub3B0cy5zdHJpY3QpLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMub3B0cy5wcmVmaXggfHwgXCJcIn1jc3MtJHtjbGFzc05hbWV9YDtcbiAgfVxuXG4gIHJlbmRlckZvbnRGYWNlKGZvbnRGYWNlOiBGb250RmFjZU9iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgZm9udE5hbWUgPSBoYXNoQ3NzT2JqZWN0KGZvbnRGYWNlKTtcbiAgICBpZiAoIXRoaXMuY2FjaGVbZm9udE5hbWVdKSB7XG4gICAgICB0aGlzLmNhY2hlW2ZvbnROYW1lXSA9IHRydWU7XG4gICAgICB0aGlzLnN0eWxlU2hlZXQuaW5zZXJ0KFtcbiAgICAgICAgZm9udEZhY2VCbG9ja1RvUnVsZShcbiAgICAgICAgICBgJHt0aGlzLm9wdHMucHJlZml4IHx8IFwiXCJ9Zm9udC0ke2ZvbnROYW1lfWAsXG4gICAgICAgICAgZGVjbGFyYXRpb25zVG9CbG9jayhmb250RmFjZSksXG4gICAgICAgICksXG4gICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMub3B0cy5wcmVmaXggfHwgXCJcIn1mb250LSR7Zm9udE5hbWV9YDtcbiAgfVxuXG4gIHJlbmRlcktleWZyYW1lcyhrZXlmcmFtZXM6IEtleWZyYW1lc09iamVjdCk6IHN0cmluZyB7XG4gICAgY29uc3QgYW5pbWF0aW9uTmFtZSA9IGhhc2hDc3NPYmplY3Qoa2V5ZnJhbWVzKTtcbiAgICBpZiAoIXRoaXMuY2FjaGVbYW5pbWF0aW9uTmFtZV0pIHtcbiAgICAgIHRoaXMuY2FjaGVbYW5pbWF0aW9uTmFtZV0gPSB0cnVlO1xuICAgICAgdGhpcy5zdHlsZVNoZWV0Lmluc2VydChbXG4gICAgICAgIGtleWZyYW1lc0Jsb2NrVG9SdWxlKFxuICAgICAgICAgIGAke3RoaXMub3B0cy5wcmVmaXggfHwgXCJcIn1hbmltYXRpb24tJHthbmltYXRpb25OYW1lfWAsXG4gICAgICAgICAga2V5ZnJhbWVzVG9CbG9jayhrZXlmcmFtZXMpLFxuICAgICAgICApLFxuICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLm9wdHMucHJlZml4IHx8IFwiXCJ9YW5pbWF0aW9uLSR7YW5pbWF0aW9uTmFtZX1gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxldHJvbkNsaWVudDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxTQUFRQSxVQUFSLFFBQXlCLFNBQXpCO0FBU0EsT0FBT0MsbUJBQVAsTUFBZ0MsMEJB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