/* eslint-env browser */
import StyletronServer from "../../server/server";
import StyletronClient from "../client";
const reduce = Array.prototype.reduce;
const map = Array.prototype.map;
describe("client", () => {
  it("container config", () => {
    const instance = new StyletronClient();
    expect(instance.container).toBe(document.head);
  });
  it("automatic stylesheet insertion", () => {
    const container = document.createElement("div");
    document.body && document.body.appendChild(container);
    const instance = new StyletronClient({
      container
    });
    expect(instance.container).toStrictEqual(container); // lazy instantiation

    expect(document.styleSheets.length).toBe(0);
    expect(instance.renderStyle({
      color: "purple"
    })).toBe("css-hZftBk");
    expect(document.styleSheets.length).toBe(1);
    instance.container.remove();
    expect(document.styleSheets.length).toBe(0);
  });
  it("rendering", () => {
    const container = document.createElement("div");
    document.body && document.body.appendChild(container);
    const instance = new StyletronClient({
      container
    });
    expect(instance.renderStyle({
      color: "purple"
    })).toEqual("css-hZftBk");
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".css-hZftBk {color: purple;}"]
    }]);
    expect(instance.renderStyle({
      "@media (min-width: 800px)": {
        color: "purple"
      }
    })).toEqual("css-hrykRm");
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".css-hZftBk {color: purple;}"]
    }, {
      rules: ["@media (min-width: 800px) {.css-hrykRm {color: purple;}}"]
    }]);
    instance.renderStyle({
      userSelect: "none"
    });
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".css-hZftBk {color: purple;}"]
    }, {
      rules: ["@media (min-width: 800px) {.css-hrykRm {color: purple;}}"]
    }, {
      rules: [".css-eaGfYw {-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}"]
    }]);
    instance.renderStyle({
      display: "flex"
    });
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".css-hZftBk {color: purple;}"]
    }, {
      rules: ["@media (min-width: 800px) {.css-hrykRm {color: purple;}}"]
    }, {
      rules: [".css-eaGfYw {-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}"]
    }, {
      rules: [".css-haOmqK {display: flex;}"]
    }]);
    instance.renderStyle({
      "@media (min-width: 600px)": {
        color: "red"
      }
    });
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".css-hZftBk {color: purple;}"]
    }, {
      rules: ["@media (min-width: 800px) {.css-hrykRm {color: purple;}}"]
    }, {
      rules: [".css-eaGfYw {-webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none;}"]
    }, {
      rules: [".css-haOmqK {display: flex;}"]
    }, {
      rules: ["@media (min-width: 600px) {.css-bWjoTf {color: red;}}"]
    }]);
    instance.container.remove();
  });
  it("prefix", () => {
    const container = document.createElement("div");
    document.body && document.body.appendChild(container);
    const instance = new StyletronClient({
      container,
      prefix: "foo_"
    });
    expect(instance.renderStyle({
      color: "purple"
    })).toBe("foo_css-hZftBk");
    expect(instance.renderFontFace({
      src: "url(blah)"
    })).toBe("foo_font-lfxDGs");
    expect(instance.renderKeyframes({
      from: {
        color: "red"
      },
      to: {
        color: "blue"
      }
    })).toBe("foo_animation-cmOXrn");
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: [".foo_css-hZftBk {color: purple;}"]
    }, {
      rules: ["@font-face {font-family: foo_font-lfxDGs; src: url(blah);}"]
    }, {
      rules: ["@keyframes foo_animation-cmOXrn { \n  from {color: red;} \n  to {color: blue;} \n}"]
    }]);
    instance.container.remove();
  });
  it("hydration", () => {
    const {
      getSheets,
      cleanup,
      container
    } = setup(); // SSR

    const server = new StyletronServer();
    injectFixtureStyles(server);
    container.innerHTML = server.getStylesheetsHtml(); // Hydration

    const instance = new StyletronClient({
      hydrate: getSheets()
    });
    const beforeSheetLength = document.styleSheets.length;
    const beforeRules = elementsToRules(getSheets());
    injectFixtureStyles(instance);
    const afterSheetLength = document.styleSheets.length;
    const afterRules = elementsToRules(getSheets());
    expect(beforeSheetLength).toBe(afterSheetLength);
    expect(afterRules).toEqual(beforeRules);
    instance.renderStyle({
      margin: "10px"
    });
    const afterMarginRules = elementsToRules(getSheets());
    expect(afterMarginRules).toEqual([...afterRules, {
      rules: [".css-iMIAew {margin: 10px;}"]
    }]);
    cleanup();
  });
  it("StyletronClient deeply nested rules", () => {
    const container = document.createElement("div");
    document.body && document.body.appendChild(container);
    const instance = new StyletronClient({
      container
    });
    expect(instance.renderStyle({
      "@supports (flex-wrap: wrap)": {
        "@media (min-width: 50em)": {
          ":hover": {
            background: "blue"
          }
        }
      }
    })).toBe("css-gPyDTX");
    expect(sheetsToRules(document.styleSheets)).toEqual([{
      rules: ["@supports (flex-wrap: wrap) {@media (min-width: 50em) {.css-gPyDTX:hover {background: blue;}}}"]
    }]);
    instance.container.remove();
  });
});

function injectFixtureStyles(styletron) {
  styletron.renderStyle({
    color: "red"
  });
  styletron.renderStyle({
    color: "green"
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      color: "green"
    }
  });
  styletron.renderStyle({
    "@media (min-width: 600px)": {
      color: "red"
    }
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      ":hover": {
        color: "green"
      }
    }
  });
  styletron.renderStyle({
    ":hover": {
      display: "none"
    }
  });
  styletron.renderStyle({
    userSelect: "none"
  });
  styletron.renderStyle({
    display: "flex"
  });
  styletron.renderFontFace({
    src: "url(blah)"
  });
  styletron.renderKeyframes({
    from: {
      color: "red"
    },
    to: {
      color: "blue"
    }
  });
}

function setup() {
  const container = document.createElement("div");

  if (document.body === void 0) {
    throw new Error("no body");
  }

  if (document.body === null) {
    throw new Error("body is null");
  }

  document.body.appendChild(container);
  return {
    container,

    getSheets() {
      return container.children;
    },

    cleanup() {
      container.remove();
    }

  };
}

function sheetToRules(sheet) {
  return reduce.call(sheet.cssRules, (acc, rule) => {
    return [...acc, rule.cssText];
  }, []);
}

function elementsToRules(elements) {
  return sheetsToRules(map.call(elements, el => el.sheet));
}

function sheetsToRules(sheets) {
  return reduce.call(sheets, (acc, sheet) => {
    return [...acc, {
      rules: sheetToRules(sheet)
    }];
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZXRyb25TZXJ2ZXIiLCJTdHlsZXRyb25DbGllbnQiLCJyZWR1Y2UiLCJBcnJheSIsInByb3RvdHlwZSIsIm1hcCIsImRlc2NyaWJlIiwiaXQiLCJpbnN0YW5jZSIsImV4cGVjdCIsImNvbnRhaW5lciIsInRvQmUiLCJkb2N1bWVudCIsImhlYWQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwidG9TdHJpY3RFcXVhbCIsInN0eWxlU2hlZXRzIiwibGVuZ3RoIiwicmVuZGVyU3R5bGUiLCJjb2xvciIsInJlbW92ZSIsInRvRXF1YWwiLCJzaGVldHNUb1J1bGVzIiwicnVsZXMiLCJ1c2VyU2VsZWN0IiwiZGlzcGxheSIsInByZWZpeCIsInJlbmRlckZvbnRGYWNlIiwic3JjIiwicmVuZGVyS2V5ZnJhbWVzIiwiZnJvbSIsInRvIiwiZ2V0U2hlZXRzIiwiY2xlYW51cCIsInNldHVwIiwic2VydmVyIiwiaW5qZWN0Rml4dHVyZVN0eWxlcyIsImlubmVySFRNTCIsImdldFN0eWxlc2hlZXRzSHRtbCIsImh5ZHJhdGUiLCJiZWZvcmVTaGVldExlbmd0aCIsImJlZm9yZVJ1bGVzIiwiZWxlbWVudHNUb1J1bGVzIiwiYWZ0ZXJTaGVldExlbmd0aCIsImFmdGVyUnVsZXMiLCJtYXJnaW4iLCJhZnRlck1hcmdpblJ1bGVzIiwiYmFja2dyb3VuZCIsInN0eWxldHJvbiIsIkVycm9yIiwiY2hpbGRyZW4iLCJzaGVldFRvUnVsZXMiLCJzaGVldCIsImNhbGwiLCJjc3NSdWxlcyIsImFjYyIsInJ1bGUiLCJjc3NUZXh0IiwiZWxlbWVudHMiLCJlbCIsInNoZWV0cyJdLCJzb3VyY2VzIjpbInNyYy9jbGllbnQvX190ZXN0c19fL2NsaWVudC5icm93c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG5pbXBvcnQgU3R5bGV0cm9uU2VydmVyIGZyb20gXCIuLi8uLi9zZXJ2ZXIvc2VydmVyXCI7XG5pbXBvcnQgU3R5bGV0cm9uQ2xpZW50IGZyb20gXCIuLi9jbGllbnRcIjtcbmNvbnN0IHJlZHVjZSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG5jb25zdCBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwO1xuXG5kZXNjcmliZShcImNsaWVudFwiLCAoKSA9PiB7XG4gIGl0KFwiY29udGFpbmVyIGNvbmZpZ1wiLCAoKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgU3R5bGV0cm9uQ2xpZW50KCk7XG4gICAgZXhwZWN0KGluc3RhbmNlLmNvbnRhaW5lcikudG9CZShkb2N1bWVudC5oZWFkKTtcbiAgfSk7XG5cbiAgaXQoXCJhdXRvbWF0aWMgc3R5bGVzaGVldCBpbnNlcnRpb25cIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgU3R5bGV0cm9uQ2xpZW50KHtjb250YWluZXJ9KTtcbiAgICBleHBlY3QoaW5zdGFuY2UuY29udGFpbmVyKS50b1N0cmljdEVxdWFsKGNvbnRhaW5lcik7XG4gICAgLy8gbGF6eSBpbnN0YW50aWF0aW9uXG4gICAgZXhwZWN0KGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aCkudG9CZSgwKTtcbiAgICBleHBlY3QoaW5zdGFuY2UucmVuZGVyU3R5bGUoe2NvbG9yOiBcInB1cnBsZVwifSkpLnRvQmUoXCJjc3MtaFpmdEJrXCIpO1xuICAgIGV4cGVjdChkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGgpLnRvQmUoMSk7XG4gICAgaW5zdGFuY2UuY29udGFpbmVyLnJlbW92ZSgpO1xuICAgIGV4cGVjdChkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGgpLnRvQmUoMCk7XG4gIH0pO1xuXG4gIGl0KFwicmVuZGVyaW5nXCIsICgpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFN0eWxldHJvbkNsaWVudCh7Y29udGFpbmVyfSk7XG4gICAgZXhwZWN0KGluc3RhbmNlLnJlbmRlclN0eWxlKHtjb2xvcjogXCJwdXJwbGVcIn0pKS50b0VxdWFsKFwiY3NzLWhaZnRCa1wiKTtcbiAgICBleHBlY3Qoc2hlZXRzVG9SdWxlcyhkb2N1bWVudC5zdHlsZVNoZWV0cykpLnRvRXF1YWwoW1xuICAgICAge3J1bGVzOiBbXCIuY3NzLWhaZnRCayB7Y29sb3I6IHB1cnBsZTt9XCJdfSxcbiAgICBdKTtcbiAgICBleHBlY3QoXG4gICAgICBpbnN0YW5jZS5yZW5kZXJTdHlsZSh7XG4gICAgICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KVwiOiB7Y29sb3I6IFwicHVycGxlXCJ9LFxuICAgICAgfSksXG4gICAgKS50b0VxdWFsKFwiY3NzLWhyeWtSbVwiKTtcblxuICAgIGV4cGVjdChzaGVldHNUb1J1bGVzKGRvY3VtZW50LnN0eWxlU2hlZXRzKSkudG9FcXVhbChbXG4gICAgICB7XG4gICAgICAgIHJ1bGVzOiBbXCIuY3NzLWhaZnRCayB7Y29sb3I6IHB1cnBsZTt9XCJdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcnVsZXM6IFtcIkBtZWRpYSAobWluLXdpZHRoOiA4MDBweCkgey5jc3MtaHJ5a1JtIHtjb2xvcjogcHVycGxlO319XCJdLFxuICAgICAgfSxcbiAgICBdKTtcblxuICAgIGluc3RhbmNlLnJlbmRlclN0eWxlKHt1c2VyU2VsZWN0OiBcIm5vbmVcIn0pO1xuICAgIGV4cGVjdChzaGVldHNUb1J1bGVzKGRvY3VtZW50LnN0eWxlU2hlZXRzKSkudG9FcXVhbChbXG4gICAgICB7cnVsZXM6IFtcIi5jc3MtaFpmdEJrIHtjb2xvcjogcHVycGxlO31cIl19LFxuICAgICAge1xuICAgICAgICBydWxlczogW1wiQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7LmNzcy1ocnlrUm0ge2NvbG9yOiBwdXJwbGU7fX1cIl0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBydWxlczogW1xuICAgICAgICAgIFwiLmNzcy1lYUdmWXcgey13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7IC1tcy11c2VyLXNlbGVjdDogbm9uZTsgdXNlci1zZWxlY3Q6IG5vbmU7fVwiLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdKTtcblxuICAgIGluc3RhbmNlLnJlbmRlclN0eWxlKHtkaXNwbGF5OiBcImZsZXhcIn0pO1xuICAgIGV4cGVjdChzaGVldHNUb1J1bGVzKGRvY3VtZW50LnN0eWxlU2hlZXRzKSkudG9FcXVhbChbXG4gICAgICB7cnVsZXM6IFtcIi5jc3MtaFpmdEJrIHtjb2xvcjogcHVycGxlO31cIl19LFxuICAgICAge1xuICAgICAgICBydWxlczogW1wiQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7LmNzcy1ocnlrUm0ge2NvbG9yOiBwdXJwbGU7fX1cIl0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBydWxlczogW1xuICAgICAgICAgIFwiLmNzcy1lYUdmWXcgey13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7IC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7IC1tcy11c2VyLXNlbGVjdDogbm9uZTsgdXNlci1zZWxlY3Q6IG5vbmU7fVwiLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtydWxlczogW1wiLmNzcy1oYU9tcUsge2Rpc3BsYXk6IGZsZXg7fVwiXX0sXG4gICAgXSk7XG5cbiAgICBpbnN0YW5jZS5yZW5kZXJTdHlsZSh7XG4gICAgICBcIkBtZWRpYSAobWluLXdpZHRoOiA2MDBweClcIjoge1xuICAgICAgICBjb2xvcjogXCJyZWRcIixcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KHNoZWV0c1RvUnVsZXMoZG9jdW1lbnQuc3R5bGVTaGVldHMpKS50b0VxdWFsKFtcbiAgICAgIHtydWxlczogW1wiLmNzcy1oWmZ0Qmsge2NvbG9yOiBwdXJwbGU7fVwiXX0sXG4gICAgICB7XG4gICAgICAgIHJ1bGVzOiBbXCJAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHsuY3NzLWhyeWtSbSB7Y29sb3I6IHB1cnBsZTt9fVwiXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgXCIuY3NzLWVhR2ZZdyB7LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgLW1vei11c2VyLXNlbGVjdDogbm9uZTsgLW1zLXVzZXItc2VsZWN0OiBub25lOyB1c2VyLXNlbGVjdDogbm9uZTt9XCIsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge3J1bGVzOiBbXCIuY3NzLWhhT21xSyB7ZGlzcGxheTogZmxleDt9XCJdfSxcbiAgICAgIHtcbiAgICAgICAgcnVsZXM6IFtcIkBtZWRpYSAobWluLXdpZHRoOiA2MDBweCkgey5jc3MtYldqb1RmIHtjb2xvcjogcmVkO319XCJdLFxuICAgICAgfSxcbiAgICBdKTtcblxuICAgIGluc3RhbmNlLmNvbnRhaW5lci5yZW1vdmUoKTtcbiAgfSk7XG5cbiAgaXQoXCJwcmVmaXhcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgU3R5bGV0cm9uQ2xpZW50KHtjb250YWluZXIsIHByZWZpeDogXCJmb29fXCJ9KTtcbiAgICBleHBlY3QoaW5zdGFuY2UucmVuZGVyU3R5bGUoe2NvbG9yOiBcInB1cnBsZVwifSkpLnRvQmUoXCJmb29fY3NzLWhaZnRCa1wiKTtcbiAgICBleHBlY3QoaW5zdGFuY2UucmVuZGVyRm9udEZhY2Uoe3NyYzogXCJ1cmwoYmxhaClcIn0pKS50b0JlKFwiZm9vX2ZvbnQtbGZ4REdzXCIpO1xuICAgIGV4cGVjdChcbiAgICAgIGluc3RhbmNlLnJlbmRlcktleWZyYW1lcyh7ZnJvbToge2NvbG9yOiBcInJlZFwifSwgdG86IHtjb2xvcjogXCJibHVlXCJ9fSksXG4gICAgKS50b0JlKFwiZm9vX2FuaW1hdGlvbi1jbU9Ycm5cIik7XG5cbiAgICBleHBlY3Qoc2hlZXRzVG9SdWxlcyhkb2N1bWVudC5zdHlsZVNoZWV0cykpLnRvRXF1YWwoW1xuICAgICAge3J1bGVzOiBbXCIuZm9vX2Nzcy1oWmZ0Qmsge2NvbG9yOiBwdXJwbGU7fVwiXX0sXG4gICAgICB7XG4gICAgICAgIHJ1bGVzOiBbXCJAZm9udC1mYWNlIHtmb250LWZhbWlseTogZm9vX2ZvbnQtbGZ4REdzOyBzcmM6IHVybChibGFoKTt9XCJdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICBcIkBrZXlmcmFtZXMgZm9vX2FuaW1hdGlvbi1jbU9Ycm4geyBcXG4gIGZyb20ge2NvbG9yOiByZWQ7fSBcXG4gIHRvIHtjb2xvcjogYmx1ZTt9IFxcbn1cIixcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgXSk7XG5cbiAgICBpbnN0YW5jZS5jb250YWluZXIucmVtb3ZlKCk7XG4gIH0pO1xuXG4gIGl0KFwiaHlkcmF0aW9uXCIsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0U2hlZXRzLCBjbGVhbnVwLCBjb250YWluZXJ9ID0gc2V0dXAoKTtcblxuICAgIC8vIFNTUlxuICAgIGNvbnN0IHNlcnZlciA9IG5ldyBTdHlsZXRyb25TZXJ2ZXIoKTtcbiAgICBpbmplY3RGaXh0dXJlU3R5bGVzKHNlcnZlcik7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IHNlcnZlci5nZXRTdHlsZXNoZWV0c0h0bWwoKTtcblxuICAgIC8vIEh5ZHJhdGlvblxuICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFN0eWxldHJvbkNsaWVudCh7XG4gICAgICBoeWRyYXRlOiBnZXRTaGVldHMoKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGJlZm9yZVNoZWV0TGVuZ3RoID0gZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoO1xuICAgIGNvbnN0IGJlZm9yZVJ1bGVzID0gZWxlbWVudHNUb1J1bGVzKGdldFNoZWV0cygpKTtcbiAgICBpbmplY3RGaXh0dXJlU3R5bGVzKGluc3RhbmNlKTtcbiAgICBjb25zdCBhZnRlclNoZWV0TGVuZ3RoID0gZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoO1xuICAgIGNvbnN0IGFmdGVyUnVsZXMgPSBlbGVtZW50c1RvUnVsZXMoZ2V0U2hlZXRzKCkpO1xuXG4gICAgZXhwZWN0KGJlZm9yZVNoZWV0TGVuZ3RoKS50b0JlKGFmdGVyU2hlZXRMZW5ndGgpO1xuICAgIGV4cGVjdChhZnRlclJ1bGVzKS50b0VxdWFsKGJlZm9yZVJ1bGVzKTtcbiAgICBpbnN0YW5jZS5yZW5kZXJTdHlsZSh7bWFyZ2luOiBcIjEwcHhcIn0pO1xuXG4gICAgY29uc3QgYWZ0ZXJNYXJnaW5SdWxlcyA9IGVsZW1lbnRzVG9SdWxlcyhnZXRTaGVldHMoKSk7XG4gICAgZXhwZWN0KGFmdGVyTWFyZ2luUnVsZXMpLnRvRXF1YWwoW1xuICAgICAgLi4uYWZ0ZXJSdWxlcyxcbiAgICAgIHtydWxlczogW1wiLmNzcy1pTUlBZXcge21hcmdpbjogMTBweDt9XCJdfSxcbiAgICBdKTtcblxuICAgIGNsZWFudXAoKTtcbiAgfSk7XG5cbiAgaXQoXCJTdHlsZXRyb25DbGllbnQgZGVlcGx5IG5lc3RlZCBydWxlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBTdHlsZXRyb25DbGllbnQoe2NvbnRhaW5lcn0pO1xuXG4gICAgZXhwZWN0KFxuICAgICAgaW5zdGFuY2UucmVuZGVyU3R5bGUoe1xuICAgICAgICBcIkBzdXBwb3J0cyAoZmxleC13cmFwOiB3cmFwKVwiOiB7XG4gICAgICAgICAgXCJAbWVkaWEgKG1pbi13aWR0aDogNTBlbSlcIjoge1xuICAgICAgICAgICAgXCI6aG92ZXJcIjoge1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcImJsdWVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICkudG9CZShcImNzcy1nUHlEVFhcIik7XG5cbiAgICBleHBlY3Qoc2hlZXRzVG9SdWxlcyhkb2N1bWVudC5zdHlsZVNoZWV0cykpLnRvRXF1YWwoW1xuICAgICAge1xuICAgICAgICBydWxlczogW1xuICAgICAgICAgIFwiQHN1cHBvcnRzIChmbGV4LXdyYXA6IHdyYXApIHtAbWVkaWEgKG1pbi13aWR0aDogNTBlbSkgey5jc3MtZ1B5RFRYOmhvdmVyIHtiYWNrZ3JvdW5kOiBibHVlO319fVwiLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICBdKTtcblxuICAgIGluc3RhbmNlLmNvbnRhaW5lci5yZW1vdmUoKTtcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gaW5qZWN0Rml4dHVyZVN0eWxlcyhzdHlsZXRyb24pIHtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtjb2xvcjogXCJyZWRcIn0pO1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe2NvbG9yOiBcImdyZWVuXCJ9KTtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtcbiAgICBcIkBtZWRpYSAobWluLXdpZHRoOiA4MDBweClcIjoge1xuICAgICAgY29sb3I6IFwiZ3JlZW5cIixcbiAgICB9LFxuICB9KTtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtcbiAgICBcIkBtZWRpYSAobWluLXdpZHRoOiA2MDBweClcIjoge1xuICAgICAgY29sb3I6IFwicmVkXCIsXG4gICAgfSxcbiAgfSk7XG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7XG4gICAgXCJAbWVkaWEgKG1pbi13aWR0aDogODAwcHgpXCI6IHtcbiAgICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgICAgY29sb3I6IFwiZ3JlZW5cIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgfSxcbiAgfSk7XG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7XG4gICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gIH0pO1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICB9KTtcbiAgc3R5bGV0cm9uLnJlbmRlckZvbnRGYWNlKHtzcmM6IFwidXJsKGJsYWgpXCJ9KTtcbiAgc3R5bGV0cm9uLnJlbmRlcktleWZyYW1lcyh7ZnJvbToge2NvbG9yOiBcInJlZFwifSwgdG86IHtjb2xvcjogXCJibHVlXCJ9fSk7XG59XG5cbmZ1bmN0aW9uIHNldHVwKCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBpZiAoZG9jdW1lbnQuYm9keSA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibm8gYm9keVwiKTtcbiAgfVxuXG4gIGlmIChkb2N1bWVudC5ib2R5ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYm9keSBpcyBudWxsXCIpO1xuICB9XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICByZXR1cm4ge1xuICAgIGNvbnRhaW5lcixcbiAgICBnZXRTaGVldHMoKSB7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH0sXG4gICAgY2xlYW51cCgpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBzaGVldFRvUnVsZXMoc2hlZXQpIHtcbiAgcmV0dXJuIHJlZHVjZS5jYWxsKFxuICAgIHNoZWV0LmNzc1J1bGVzLFxuICAgIChhY2MsIHJ1bGUpID0+IHtcbiAgICAgIHJldHVybiBbLi4uYWNjLCBydWxlLmNzc1RleHRdO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzVG9SdWxlcyhlbGVtZW50cykge1xuICByZXR1cm4gc2hlZXRzVG9SdWxlcyhtYXAuY2FsbChlbGVtZW50cywgZWwgPT4gZWwuc2hlZXQpKTtcbn1cblxuZnVuY3Rpb24gc2hlZXRzVG9SdWxlcyhzaGVldHMpIHtcbiAgcmV0dXJuIHJlZHVjZS5jYWxsKFxuICAgIHNoZWV0cyxcbiAgICAoYWNjLCBzaGVldCkgPT4ge1xuICAgICAgcmV0dXJuIFsuLi5hY2MsIHtydWxlczogc2hlZXRUb1J1bGVzKHNoZWV0KX1dO1xuICAgIH0sXG4gICAgW10sXG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsT0FBT0EsZUFBUCxNQUE0QixxQkFBNUI7QUFDQSxPQUFPQyxlQUFQLE1BQTRCLFdBQTVCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JGLE1BQS9CO0FBQ0EsTUFBTUcsR0FBRyxHQUFHRixLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEdBQTVCO0FBRUFDLFFBQVEsQ0FBQyxRQUFELEVBQVcsTUFBTTtFQUN2QkMsRUFBRSxDQUFDLGtCQUFELEVBQXFCLE1BQU07SUFDM0IsTUFBTUMsUUFBUSxHQUFHLElBQUlQLGVBQUosRUFBakI7SUFDQVEsTUFBTSxDQUFDRCxRQUFRLENBQUNFLFNBQVYsQ0FBTixDQUEyQkMsSUFBM0IsQ0FBZ0NDLFFBQVEsQ0FBQ0MsSUFBekM7RUFDRCxDQUhDLENBQUY7RUFLQU4sRUFBRSxDQUFDLGdDQUFELEVBQW1DLE1BQU07SUFDekMsTUFBTUcsU0FBUyxHQUFHRSxRQUFRLENBQUNFLGFB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