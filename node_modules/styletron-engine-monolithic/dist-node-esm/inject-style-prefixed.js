import hyphenate from "./hyphenate-style-name";
import { validateNoMixedHand } from "./validate-no-mixed-hand";
import { prefix as prefixRule } from "inline-style-prefixer";
export default function injectStylePrefixed(styles, selector, prefix, strict) {
  let rules = "";
  let classes = [];

  for (const key in styles) {
    const value = styles[key];

    if (value === void 0 || value === null) {
      continue;
    }

    if (typeof value !== "object") {
      if (process.env.NODE_ENV !== "production") {
        if (value === null || Array.isArray(value) || typeof value !== "number" && typeof value !== "string") {
          throw new Error(`Unsupported style value: ${JSON.stringify(value)} used in property ${JSON.stringify(key)}`);
        }
      }

      const rule = hyphenate(key) + ":" + value;
      const prefixed = prefixRule({
        [key]: value
      });

      for (const prefixedKey in prefixed) {
        const prefixedVal = prefixed[prefixedKey];

        if (typeof prefixedVal === "string" || typeof prefixedVal === "number") {
          const prefixedRule = hyphenate(prefixedKey) + ":" + prefixedVal;

          if (prefixedRule !== rule) {
            rules += prefixedRule + ";";
          }
        } else if (Array.isArray(prefixedVal)) {
          const hyphenated = hyphenate(prefixedKey);

          for (let i = 0; i < prefixedVal.length; i++) {
            const prefixedRule = hyphenated + ":" + prefixedVal[i];

            if (prefixedRule !== rule) {
              rules += prefixedRule + ";";
            }
          }
        }
      }

      rules += rule + ";";
      continue;
    }

    if (key[0] === ":") {
      classes = [...classes, ...injectStylePrefixed(value, selector + key, prefix, strict)];
      continue;
    }

    if (key[0] === "@") {
      const nestedRules = injectStylePrefixed(value, selector, prefix, strict);
      classes = [...classes, key + "{" + nestedRules.join("") + "}"];
      continue;
    }

    classes = [...classes, key + "{" + injectStylePrefixed(value, "", prefix, strict).join("") + "}"];
  } // strict mode checks for mixed long/shorthands to keep compatibility with atomic engine


  if (strict && process.env.NODE_ENV !== "production") {
    const conflicts = validateNoMixedHand(styles);

    if (conflicts.length) {
      conflicts.forEach(({
        shorthand,
        longhand
      }) => {
        const short = JSON.stringify({
          [shorthand.property]: shorthand.value
        });
        const long = JSON.stringify({
          [longhand.property]: longhand.value
        }); // eslint-disable-next-line no-console

        console.warn(`Styles \`${short}\` and \`${long}\` in object yielding class "${selector}" may result in unexpected behavior. Mixing shorthand and longhand properties within the same style object is unsupported with atomic rendering.`);
      });
    }
  } // used to handle 'exact' selectors like 'div' or referencing another class name like '.css-abc123:hover'
  // selector is applied in the parent recursive function call.


  if (!selector) {
    return [rules];
  }

  const result = [];

  if (rules) {
    result.push(`.${prefix}css-${selector}{${rules}}`);
  }

  return [...result, ...classes];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoeXBoZW5hdGUiLCJ2YWxpZGF0ZU5vTWl4ZWRIYW5kIiwicHJlZml4IiwicHJlZml4UnVsZSIsImluamVjdFN0eWxlUHJlZml4ZWQiLCJzdHlsZXMiLCJzZWxlY3RvciIsInN0cmljdCIsInJ1bGVzIiwiY2xhc3NlcyIsImtleSIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwicnVsZSIsInByZWZpeGVkIiwicHJlZml4ZWRLZXkiLCJwcmVmaXhlZFZhbCIsInByZWZpeGVkUnVsZSIsImh5cGhlbmF0ZWQiLCJpIiwibGVuZ3RoIiwibmVzdGVkUnVsZXMiLCJqb2luIiwiY29uZmxpY3RzIiwiZm9yRWFjaCIsInNob3J0aGFuZCIsImxvbmdoYW5kIiwic2hvcnQiLCJwcm9wZXJ0eSIsImxvbmciLCJjb25zb2xlIiwid2FybiIsInJlc3VsdCIsInB1c2giXSwic291cmNlcyI6WyJzcmMvaW5qZWN0LXN0eWxlLXByZWZpeGVkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIF9fREVWX186IGJvb2xlYW47XG5cbmltcG9ydCBoeXBoZW5hdGUgZnJvbSBcIi4vaHlwaGVuYXRlLXN0eWxlLW5hbWVcIjtcbmltcG9ydCB7dmFsaWRhdGVOb01peGVkSGFuZH0gZnJvbSBcIi4vdmFsaWRhdGUtbm8tbWl4ZWQtaGFuZFwiO1xuaW1wb3J0IHtwcmVmaXggYXMgcHJlZml4UnVsZX0gZnJvbSBcImlubGluZS1zdHlsZS1wcmVmaXhlclwiO1xuXG5pbXBvcnQgdHlwZSB7U3R5bGVPYmplY3R9IGZyb20gXCJzdHlsZXRyb24tc3RhbmRhcmRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5qZWN0U3R5bGVQcmVmaXhlZChcbiAgc3R5bGVzOiBTdHlsZU9iamVjdCxcbiAgc2VsZWN0b3I6IHN0cmluZyxcbiAgcHJlZml4OiBzdHJpbmcsXG4gIHN0cmljdDogYm9vbGVhbixcbikge1xuICBsZXQgcnVsZXMgPSBcIlwiO1xuICBsZXQgY2xhc3NlcyA9IFtdO1xuXG4gIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XG5cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHZhbHVlID09PSBudWxsIHx8XG4gICAgICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgICAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHN0eWxlIHZhbHVlOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICl9IHVzZWQgaW4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBydWxlID0gaHlwaGVuYXRlKGtleSkgKyBcIjpcIiArIHZhbHVlO1xuICAgICAgY29uc3QgcHJlZml4ZWQgPSBwcmVmaXhSdWxlKHtba2V5XTogdmFsdWV9KTtcbiAgICAgIGZvciAoY29uc3QgcHJlZml4ZWRLZXkgaW4gcHJlZml4ZWQpIHtcbiAgICAgICAgY29uc3QgcHJlZml4ZWRWYWwgPSBwcmVmaXhlZFtwcmVmaXhlZEtleV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgcHJlZml4ZWRWYWwgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICB0eXBlb2YgcHJlZml4ZWRWYWwgPT09IFwibnVtYmVyXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgcHJlZml4ZWRSdWxlID0gaHlwaGVuYXRlKHByZWZpeGVkS2V5KSArIFwiOlwiICsgcHJlZml4ZWRWYWw7XG4gICAgICAgICAgaWYgKHByZWZpeGVkUnVsZSAhPT0gcnVsZSkge1xuICAgICAgICAgICAgcnVsZXMgKz0gcHJlZml4ZWRSdWxlICsgXCI7XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocHJlZml4ZWRWYWwpKSB7XG4gICAgICAgICAgY29uc3QgaHlwaGVuYXRlZCA9IGh5cGhlbmF0ZShwcmVmaXhlZEtleSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlZFZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWRSdWxlID0gaHlwaGVuYXRlZCArIFwiOlwiICsgcHJlZml4ZWRWYWxbaV07XG4gICAgICAgICAgICBpZiAocHJlZml4ZWRSdWxlICE9PSBydWxlKSB7XG4gICAgICAgICAgICAgIHJ1bGVzICs9IHByZWZpeGVkUnVsZSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcnVsZXMgKz0gcnVsZSArIFwiO1wiO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleVswXSA9PT0gXCI6XCIpIHtcbiAgICAgIGNsYXNzZXMgPSBbXG4gICAgICAgIC4uLmNsYXNzZXMsXG4gICAgICAgIC4uLmluamVjdFN0eWxlUHJlZml4ZWQoXG4gICAgICAgICAgdmFsdWUgYXMgU3R5bGVPYmplY3QsXG4gICAgICAgICAgc2VsZWN0b3IgKyBrZXksXG4gICAgICAgICAgcHJlZml4LFxuICAgICAgICAgIHN0cmljdCxcbiAgICAgICAgKSxcbiAgICAgIF07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5WzBdID09PSBcIkBcIikge1xuICAgICAgY29uc3QgbmVzdGVkUnVsZXMgPSBpbmplY3RTdHlsZVByZWZpeGVkKFxuICAgICAgICB2YWx1ZSBhcyBTdHlsZU9iamVjdCxcbiAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgIHByZWZpeCxcbiAgICAgICAgc3RyaWN0LFxuICAgICAgKTtcbiAgICAgIGNsYXNzZXMgPSBbLi4uY2xhc3Nlcywga2V5ICsgXCJ7XCIgKyBuZXN0ZWRSdWxlcy5qb2luKFwiXCIpICsgXCJ9XCJdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY2xhc3NlcyA9IFtcbiAgICAgIC4uLmNsYXNzZXMsXG4gICAgICBrZXkgK1xuICAgICAgICBcIntcIiArXG4gICAgICAgIGluamVjdFN0eWxlUHJlZml4ZWQodmFsdWUgYXMgU3R5bGVPYmplY3QsIFwiXCIsIHByZWZpeCwgc3RyaWN0KS5qb2luKFwiXCIpICtcbiAgICAgICAgXCJ9XCIsXG4gICAgXTtcbiAgfVxuXG4gIC8vIHN0cmljdCBtb2RlIGNoZWNrcyBmb3IgbWl4ZWQgbG9uZy9zaG9ydGhhbmRzIHRvIGtlZXAgY29tcGF0aWJpbGl0eSB3aXRoIGF0b21pYyBlbmdpbmVcbiAgaWYgKHN0cmljdCAmJiBfX0RFVl9fKSB7XG4gICAgY29uc3QgY29uZmxpY3RzID0gdmFsaWRhdGVOb01peGVkSGFuZChzdHlsZXMpO1xuICAgIGlmIChjb25mbGljdHMubGVuZ3RoKSB7XG4gICAgICBjb25mbGljdHMuZm9yRWFjaCgoe3Nob3J0aGFuZCwgbG9uZ2hhbmR9KSA9PiB7XG4gICAgICAgIGNvbnN0IHNob3J0ID0gSlNPTi5zdHJpbmdpZnkoe1tzaG9ydGhhbmQucHJvcGVydHldOiBzaG9ydGhhbmQudmFsdWV9KTtcbiAgICAgICAgY29uc3QgbG9uZyA9IEpTT04uc3RyaW5naWZ5KHtbbG9uZ2hhbmQucHJvcGVydHldOiBsb25naGFuZC52YWx1ZX0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFN0eWxlcyBcXGAke3Nob3J0fVxcYCBhbmQgXFxgJHtsb25nfVxcYCBpbiBvYmplY3QgeWllbGRpbmcgY2xhc3MgXCIke3NlbGVjdG9yfVwiIG1heSByZXN1bHQgaW4gdW5leHBlY3RlZCBiZWhhdmlvci4gTWl4aW5nIHNob3J0aGFuZCBhbmQgbG9uZ2hhbmQgcHJvcGVydGllcyB3aXRoaW4gdGhlIHNhbWUgc3R5bGUgb2JqZWN0IGlzIHVuc3VwcG9ydGVkIHdpdGggYXRvbWljIHJlbmRlcmluZy5gLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gdXNlZCB0byBoYW5kbGUgJ2V4YWN0JyBzZWxlY3RvcnMgbGlrZSAnZGl2JyBvciByZWZlcmVuY2luZyBhbm90aGVyIGNsYXNzIG5hbWUgbGlrZSAnLmNzcy1hYmMxMjM6aG92ZXInXG4gIC8vIHNlbGVjdG9yIGlzIGFwcGxpZWQgaW4gdGhlIHBhcmVudCByZWN1cnNpdmUgZnVuY3Rpb24gY2FsbC5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBbcnVsZXNdO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGlmIChydWxlcykge1xuICAgIHJlc3VsdC5wdXNoKGAuJHtwcmVmaXh9Y3NzLSR7c2VsZWN0b3J9eyR7cnVsZXN9fWApO1xuICB9XG4gIHJldHVybiBbLi4ucmVzdWx0LCAuLi5jbGFzc2VzXTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBRUEsT0FBT0EsU0FBUCxNQUFzQix3QkFBdEI7QUFDQSxTQUFRQyxtQkFBUixRQUFrQywwQkFBbEM7QUFDQSxTQUFRQyxNQUFNLElBQUlDLFVBQWxCLFFBQW1DLHVCQUFuQztBQUlBLGVBQWUsU0FBU0MsbUJBQVQsQ0FDYkMsTUFEYSxFQUViQyxRQUZhLEVBR2JKLE1BSGEsRUFJYkssTUFKYSxFQUtiO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLEVBQVo7RUFDQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7RUFFQSxLQUFLLE1BQU1DLEdBQVgs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